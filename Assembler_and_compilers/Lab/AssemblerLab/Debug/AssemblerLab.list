
AssemblerLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005434  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080055c4  080055c4  000155c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800567c  0800567c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800567c  0800567c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800567c  0800567c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a48  20000010  08005694  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a58  08005694  00021a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a999  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d95  00000000  00000000  0003a9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001350  00000000  00000000  0003d770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  0003eac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cb3a  00000000  00000000  0003fce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011bd2  00000000  00000000  0005c822  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae92d  00000000  00000000  0006e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011cd21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c4  00000000  00000000  0011cd9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055ac 	.word	0x080055ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080055ac 	.word	0x080055ac

080001d0 <BlinkLed>:

static uint32_t ticks = 0;
static int32_t ToggleLed();

void BlinkLed()
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	if(ToggleLed())
 80001d4:	f000 f80c 	bl	80001f0 <ToggleLed>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d004      	beq.n	80001e8 <BlinkLed+0x18>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80001de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e2:	4802      	ldr	r0, [pc, #8]	; (80001ec <BlinkLed+0x1c>)
 80001e4:	f000 fd5c 	bl	8000ca0 <HAL_GPIO_TogglePin>
	}
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	48000400 	.word	0x48000400

080001f0 <ToggleLed>:


static int32_t ToggleLed()
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
    int32_t toggle = 0; // Set to non-zero if we should toggle the led
 80001f6:	2300      	movs	r3, #0
 80001f8:	607b      	str	r3, [r7, #4]

    ticks++;
 80001fa:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <ToggleLed+0x38>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	3301      	adds	r3, #1
 8000200:	4a09      	ldr	r2, [pc, #36]	; (8000228 <ToggleLed+0x38>)
 8000202:	6013      	str	r3, [r2, #0]
    if (ticks > TOGGLE_TIME)
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <ToggleLed+0x38>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f242 7210 	movw	r2, #10000	; 0x2710
 800020c:	4293      	cmp	r3, r2
 800020e:	d904      	bls.n	800021a <ToggleLed+0x2a>
    {
    	ticks = 0;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <ToggleLed+0x38>)
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
    	toggle = 1;
 8000216:	2301      	movs	r3, #1
 8000218:	607b      	str	r3, [r7, #4]
    }

    return toggle;
 800021a:	687b      	ldr	r3, [r7, #4]
}
 800021c:	4618      	mov	r0, r3
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	2000002c 	.word	0x2000002c

0800022c <ResetTimer>:


void ResetTimer()
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	ticks = 0;
 8000230:	4b03      	ldr	r3, [pc, #12]	; (8000240 <ResetTimer+0x14>)
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
}
 8000236:	bf00      	nop
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	2000002c 	.word	0x2000002c

08000244 <ButtonToggle>:
#include "cmsis_os.h"

#include "blink.h"

void ButtonToggle()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	static uint8_t buttonPressed = 0;
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && !buttonPressed)
 8000248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <ButtonToggle+0x40>)
 800024e:	f000 fcf7 	bl	8000c40 <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d00a      	beq.n	800026e <ButtonToggle+0x2a>
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <ButtonToggle+0x44>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d106      	bne.n	800026e <ButtonToggle+0x2a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000264:	4809      	ldr	r0, [pc, #36]	; (800028c <ButtonToggle+0x48>)
 8000266:	f000 fd1b 	bl	8000ca0 <HAL_GPIO_TogglePin>
		ResetTimer();
 800026a:	f7ff ffdf 	bl	800022c <ResetTimer>
	}
	buttonPressed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800026e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000272:	4804      	ldr	r0, [pc, #16]	; (8000284 <ButtonToggle+0x40>)
 8000274:	f000 fce4 	bl	8000c40 <HAL_GPIO_ReadPin>
 8000278:	4603      	mov	r3, r0
 800027a:	461a      	mov	r2, r3
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <ButtonToggle+0x44>)
 800027e:	701a      	strb	r2, [r3, #0]
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	48000800 	.word	0x48000800
 8000288:	20000030 	.word	0x20000030
 800028c:	48000400 	.word	0x48000400

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fa4a 	bl	800072c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f826 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f896 	bl	80003cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a0:	f000 f864 	bl	800036c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002a4:	f002 fc46 	bl	8002b34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ButtonFunction */
  ButtonFunctionHandle = osThreadNew(StartButtonFunction, NULL, &ButtonFunction_attributes);
 80002a8:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <main+0x40>)
 80002aa:	2100      	movs	r1, #0
 80002ac:	4809      	ldr	r0, [pc, #36]	; (80002d4 <main+0x44>)
 80002ae:	f002 fca9 	bl	8002c04 <osThreadNew>
 80002b2:	4602      	mov	r2, r0
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <main+0x48>)
 80002b6:	601a      	str	r2, [r3, #0]

  /* creation of BlinkFunction */
  BlinkFunctionHandle = osThreadNew(StartBlinkFunction, NULL, &BlinkFunction_attributes);
 80002b8:	4a08      	ldr	r2, [pc, #32]	; (80002dc <main+0x4c>)
 80002ba:	2100      	movs	r1, #0
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <main+0x50>)
 80002be:	f002 fca1 	bl	8002c04 <osThreadNew>
 80002c2:	4602      	mov	r2, r0
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <main+0x54>)
 80002c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002c8:	f002 fc68 	bl	8002b9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <main+0x3c>
 80002ce:	bf00      	nop
 80002d0:	080055fc 	.word	0x080055fc
 80002d4:	0800049d 	.word	0x0800049d
 80002d8:	200019c4 	.word	0x200019c4
 80002dc:	08005620 	.word	0x08005620
 80002e0:	080004b1 	.word	0x080004b1
 80002e4:	2000193c 	.word	0x2000193c

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	; 0x40
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f005 f94f 	bl	800559a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030a:	2302      	movs	r3, #2
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	2301      	movs	r3, #1
 8000310:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	2310      	movs	r3, #16
 8000314:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	2302      	movs	r3, #2
 8000318:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031a:	2300      	movs	r3, #0
 800031c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800031e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000322:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	f107 0318 	add.w	r3, r7, #24
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fcd3 	bl	8000cd4 <HAL_RCC_OscConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000334:	f000 f8d8 	bl	80004e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000338:	230f      	movs	r3, #15
 800033a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033c:	2302      	movs	r3, #2
 800033e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2102      	movs	r1, #2
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fbc6 	bl	8001ae4 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800035e:	f000 f8c3 	bl	80004e8 <Error_Handler>
  }
}
 8000362:	bf00      	nop
 8000364:	3740      	adds	r7, #64	; 0x40
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <MX_USART2_UART_Init+0x58>)
 8000372:	4a15      	ldr	r2, [pc, #84]	; (80003c8 <MX_USART2_UART_Init+0x5c>)
 8000374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000376:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <MX_USART2_UART_Init+0x58>)
 8000378:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800037c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_USART2_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <MX_USART2_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_USART2_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_USART2_UART_Init+0x58>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MX_USART2_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_USART2_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_USART2_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_USART2_UART_Init+0x58>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_USART2_UART_Init+0x58>)
 80003b0:	f002 f88a 	bl	80024c8 <HAL_UART_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ba:	f000 f895 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20001940 	.word	0x20001940
 80003c8:	40004400 	.word	0x40004400

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	; 0x28
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	f107 0314 	add.w	r3, r7, #20
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e2:	4b2b      	ldr	r3, [pc, #172]	; (8000490 <MX_GPIO_Init+0xc4>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a2a      	ldr	r2, [pc, #168]	; (8000490 <MX_GPIO_Init+0xc4>)
 80003e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b28      	ldr	r3, [pc, #160]	; (8000490 <MX_GPIO_Init+0xc4>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003f6:	613b      	str	r3, [r7, #16]
 80003f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003fa:	4b25      	ldr	r3, [pc, #148]	; (8000490 <MX_GPIO_Init+0xc4>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a24      	ldr	r2, [pc, #144]	; (8000490 <MX_GPIO_Init+0xc4>)
 8000400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000404:	6153      	str	r3, [r2, #20]
 8000406:	4b22      	ldr	r3, [pc, #136]	; (8000490 <MX_GPIO_Init+0xc4>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000412:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <MX_GPIO_Init+0xc4>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a1e      	ldr	r2, [pc, #120]	; (8000490 <MX_GPIO_Init+0xc4>)
 8000418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b1c      	ldr	r3, [pc, #112]	; (8000490 <MX_GPIO_Init+0xc4>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042a:	4b19      	ldr	r3, [pc, #100]	; (8000490 <MX_GPIO_Init+0xc4>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a18      	ldr	r2, [pc, #96]	; (8000490 <MX_GPIO_Init+0xc4>)
 8000430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b16      	ldr	r3, [pc, #88]	; (8000490 <MX_GPIO_Init+0xc4>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000448:	4812      	ldr	r0, [pc, #72]	; (8000494 <MX_GPIO_Init+0xc8>)
 800044a:	f000 fc11 	bl	8000c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800044e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000454:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800045e:	f107 0314 	add.w	r3, r7, #20
 8000462:	4619      	mov	r1, r3
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <MX_GPIO_Init+0xcc>)
 8000466:	f000 fa79 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800046a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000470:	2301      	movs	r3, #1
 8000472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	2300      	movs	r3, #0
 800047a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	4619      	mov	r1, r3
 8000482:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_GPIO_Init+0xc8>)
 8000484:	f000 fa6a 	bl	800095c <HAL_GPIO_Init>

}
 8000488:	bf00      	nop
 800048a:	3728      	adds	r7, #40	; 0x28
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	48000400 	.word	0x48000400
 8000498:	48000800 	.word	0x48000800

0800049c <StartButtonFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartButtonFunction */
void StartButtonFunction(void *argument)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    ButtonToggle(); // Toggle led state on button press
 80004a4:	f7ff fece 	bl	8000244 <ButtonToggle>
    osDelay(1);
 80004a8:	2001      	movs	r0, #1
 80004aa:	f002 fc55 	bl	8002d58 <osDelay>
    ButtonToggle(); // Toggle led state on button press
 80004ae:	e7f9      	b.n	80004a4 <StartButtonFunction+0x8>

080004b0 <StartBlinkFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkFunction */
void StartBlinkFunction(void *argument)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkFunction */
  /* Infinite loop */
  for(;;)
  {
	BlinkLed(); // Toggle led state every 10 seconds
 80004b8:	f7ff fe8a 	bl	80001d0 <BlinkLed>
    osDelay(1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f002 fc4b 	bl	8002d58 <osDelay>
	BlinkLed(); // Toggle led state every 10 seconds
 80004c2:	e7f9      	b.n	80004b8 <StartBlinkFunction+0x8>

080004c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d101      	bne.n	80004da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004d6:	f000 f93f 	bl	8000758 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40001000 	.word	0x40001000

080004e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ee:	e7fe      	b.n	80004ee <Error_Handler+0x6>

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <HAL_MspInit+0x4c>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a10      	ldr	r2, [pc, #64]	; (800053c <HAL_MspInit+0x4c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_MspInit+0x4c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_MspInit+0x4c>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <HAL_MspInit+0x4c>)
 8000514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_MspInit+0x4c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	210f      	movs	r1, #15
 800052a:	f06f 0001 	mvn.w	r0, #1
 800052e:	f000 f9eb 	bl	8000908 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a17      	ldr	r2, [pc, #92]	; (80005bc <HAL_UART_MspInit+0x7c>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d128      	bne.n	80005b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <HAL_UART_MspInit+0x80>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <HAL_UART_MspInit+0x80>)
 8000568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <HAL_UART_MspInit+0x80>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <HAL_UART_MspInit+0x80>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <HAL_UART_MspInit+0x80>)
 8000580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_UART_MspInit+0x80>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000592:	230c      	movs	r3, #12
 8000594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005a2:	2307      	movs	r3, #7
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f000 f9d4 	bl	800095c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40004400 	.word	0x40004400
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	; 0x30
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	2036      	movs	r0, #54	; 0x36
 80005da:	f000 f995 	bl	8000908 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005de:	2036      	movs	r0, #54	; 0x36
 80005e0:	f000 f9ae 	bl	8000940 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <HAL_InitTick+0xa0>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <HAL_InitTick+0xa0>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	61d3      	str	r3, [r2, #28]
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <HAL_InitTick+0xa0>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	f003 0310 	and.w	r3, r3, #16
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005fc:	f107 0210 	add.w	r2, r7, #16
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fca2 	bl	8001f50 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800060c:	f001 fc5c 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8000610:	4603      	mov	r3, r0
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <HAL_InitTick+0xa4>)
 800061a:	fba2 2303 	umull	r2, r3, r2, r3
 800061e:	0c9b      	lsrs	r3, r3, #18
 8000620:	3b01      	subs	r3, #1
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <HAL_InitTick+0xa8>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <HAL_InitTick+0xac>)
 8000628:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <HAL_InitTick+0xa8>)
 800062c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000630:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_InitTick+0xa8>)
 8000634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000636:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_InitTick+0xa8>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <HAL_InitTick+0xa8>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <HAL_InitTick+0xa8>)
 8000646:	f001 fcb5 	bl	8001fb4 <HAL_TIM_Base_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d104      	bne.n	800065a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000650:	4806      	ldr	r0, [pc, #24]	; (800066c <HAL_InitTick+0xa8>)
 8000652:	f001 fd11 	bl	8002078 <HAL_TIM_Base_Start_IT>
 8000656:	4603      	mov	r3, r0
 8000658:	e000      	b.n	800065c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	3730      	adds	r7, #48	; 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	431bde83 	.word	0x431bde83
 800066c:	200019c8 	.word	0x200019c8
 8000670:	40001000 	.word	0x40001000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <NMI_Handler+0x4>

0800067a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <MemManage_Handler+0x4>

08000686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <UsageFault_Handler+0x4>

08000692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006a4:	4802      	ldr	r0, [pc, #8]	; (80006b0 <TIM6_DAC_IRQHandler+0x10>)
 80006a6:	f001 fd3b 	bl	8002120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200019c8 	.word	0x200019c8

080006b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <SystemInit+0x20>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006be:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <SystemInit+0x20>)
 80006c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000710 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006de:	490e      	ldr	r1, [pc, #56]	; (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f4:	4c0b      	ldr	r4, [pc, #44]	; (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000702:	f7ff ffd7 	bl	80006b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000706:	f004 ff19 	bl	800553c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070a:	f7ff fdc1 	bl	8000290 <main>

0800070e <LoopForever>:

LoopForever:
    b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000710:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800071c:	08005684 	.word	0x08005684
  ldr r2, =_sbss
 8000720:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000724:	20001a58 	.word	0x20001a58

08000728 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC1_IRQHandler>
	...

0800072c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_Init+0x28>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_Init+0x28>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f000 f8d8 	bl	80008f2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff ff3e 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000748:	f7ff fed2 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40022000 	.word	0x40022000

08000758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_IncTick+0x20>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_IncTick+0x24>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4413      	add	r3, r2
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_IncTick+0x24>)
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000008 	.word	0x20000008
 800077c:	20001a14 	.word	0x20001a14

08000780 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;  
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <HAL_GetTick+0x14>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20001a14 	.word	0x20001a14

08000798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ca:	4a04      	ldr	r2, [pc, #16]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	60d3      	str	r3, [r2, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <__NVIC_GetPriorityGrouping+0x18>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	db0b      	blt.n	8000826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 021f 	and.w	r2, r3, #31
 8000814:	4907      	ldr	r1, [pc, #28]	; (8000834 <__NVIC_EnableIRQ+0x38>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	095b      	lsrs	r3, r3, #5
 800081c:	2001      	movs	r0, #1
 800081e:	fa00 f202 	lsl.w	r2, r0, r2
 8000822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	.word	0xe000e100

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db0a      	blt.n	8000862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	; (8000884 <__NVIC_SetPriority+0x4c>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000860:	e00a      	b.n	8000878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4908      	ldr	r1, [pc, #32]	; (8000888 <__NVIC_SetPriority+0x50>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	3b04      	subs	r3, #4
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	440b      	add	r3, r1
 8000876:	761a      	strb	r2, [r3, #24]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	; 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff4c 	bl	8000798 <__NVIC_SetPriorityGrouping>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
 8000914:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091a:	f7ff ff61 	bl	80007e0 <__NVIC_GetPriorityGrouping>
 800091e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	68b9      	ldr	r1, [r7, #8]
 8000924:	6978      	ldr	r0, [r7, #20]
 8000926:	f7ff ffb1 	bl	800088c <NVIC_EncodePriority>
 800092a:	4602      	mov	r2, r0
 800092c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff80 	bl	8000838 <__NVIC_SetPriority>
}
 8000938:	bf00      	nop
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff54 	bl	80007fc <__NVIC_EnableIRQ>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800095c:	b480      	push	{r7}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e14e      	b.n	8000c0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	2101      	movs	r1, #1
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 8140 	beq.w	8000c04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 0303 	and.w	r3, r3, #3
 800098c:	2b01      	cmp	r3, #1
 800098e:	d005      	beq.n	800099c <HAL_GPIO_Init+0x40>
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	2b02      	cmp	r3, #2
 800099a:	d130      	bne.n	80009fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	2203      	movs	r2, #3
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009d2:	2201      	movs	r2, #1
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	091b      	lsrs	r3, r3, #4
 80009e8:	f003 0201 	and.w	r2, r3, #1
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d017      	beq.n	8000a3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	2203      	movs	r2, #3
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d123      	bne.n	8000a8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	08da      	lsrs	r2, r3, #3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3208      	adds	r2, #8
 8000a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	691a      	ldr	r2, [r3, #16]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	08da      	lsrs	r2, r3, #3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3208      	adds	r2, #8
 8000a88:	6939      	ldr	r1, [r7, #16]
 8000a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2203      	movs	r2, #3
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 0203 	and.w	r2, r3, #3
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 809a 	beq.w	8000c04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad0:	4b55      	ldr	r3, [pc, #340]	; (8000c28 <HAL_GPIO_Init+0x2cc>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a54      	ldr	r2, [pc, #336]	; (8000c28 <HAL_GPIO_Init+0x2cc>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b52      	ldr	r3, [pc, #328]	; (8000c28 <HAL_GPIO_Init+0x2cc>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ae8:	4a50      	ldr	r2, [pc, #320]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	089b      	lsrs	r3, r3, #2
 8000aee:	3302      	adds	r3, #2
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	220f      	movs	r2, #15
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b12:	d013      	beq.n	8000b3c <HAL_GPIO_Init+0x1e0>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a46      	ldr	r2, [pc, #280]	; (8000c30 <HAL_GPIO_Init+0x2d4>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d00d      	beq.n	8000b38 <HAL_GPIO_Init+0x1dc>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a45      	ldr	r2, [pc, #276]	; (8000c34 <HAL_GPIO_Init+0x2d8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d007      	beq.n	8000b34 <HAL_GPIO_Init+0x1d8>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a44      	ldr	r2, [pc, #272]	; (8000c38 <HAL_GPIO_Init+0x2dc>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d101      	bne.n	8000b30 <HAL_GPIO_Init+0x1d4>
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e006      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b30:	2305      	movs	r3, #5
 8000b32:	e004      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b34:	2302      	movs	r3, #2
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	f002 0203 	and.w	r2, r2, #3
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	4093      	lsls	r3, r2
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b4e:	4937      	ldr	r1, [pc, #220]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3302      	adds	r3, #2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b80:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000baa:	4a24      	ldr	r2, [pc, #144]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_GPIO_Init+0x2e0>)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	3301      	adds	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	fa22 f303 	lsr.w	r3, r2, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f47f aea9 	bne.w	800096c <HAL_GPIO_Init+0x10>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	48000400 	.word	0x48000400
 8000c34:	48000800 	.word	0x48000800
 8000c38:	48000c00 	.word	0x48000c00
 8000c3c:	40010400 	.word	0x40010400

08000c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691a      	ldr	r2, [r3, #16]
 8000c50:	887b      	ldrh	r3, [r7, #2]
 8000c52:	4013      	ands	r3, r2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e001      	b.n	8000c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c80:	787b      	ldrb	r3, [r7, #1]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c8c:	e002      	b.n	8000c94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	041a      	lsls	r2, r3, #16
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43d9      	mvns	r1, r3
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	619a      	str	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f000 bef4 	b.w	8001ad6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 816a 	beq.w	8000fd2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cfe:	4bb3      	ldr	r3, [pc, #716]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d00c      	beq.n	8000d24 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d0a:	4bb0      	ldr	r3, [pc, #704]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	2b08      	cmp	r3, #8
 8000d14:	d159      	bne.n	8000dca <HAL_RCC_OscConfig+0xf6>
 8000d16:	4bad      	ldr	r3, [pc, #692]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d22:	d152      	bne.n	8000dca <HAL_RCC_OscConfig+0xf6>
 8000d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d28:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d30:	fa93 f3a3 	rbit	r3, r3
 8000d34:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d38:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3c:	fab3 f383 	clz	r3, r3
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d102      	bne.n	8000d56 <HAL_RCC_OscConfig+0x82>
 8000d50:	4b9e      	ldr	r3, [pc, #632]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	e015      	b.n	8000d82 <HAL_RCC_OscConfig+0xae>
 8000d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d62:	fa93 f3a3 	rbit	r3, r3
 8000d66:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d72:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d76:	fa93 f3a3 	rbit	r3, r3
 8000d7a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d7e:	4b93      	ldr	r3, [pc, #588]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d86:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d8a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d8e:	fa92 f2a2 	rbit	r2, r2
 8000d92:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d96:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	f042 0220 	orr.w	r2, r2, #32
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	f002 021f 	and.w	r2, r2, #31
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 810c 	beq.w	8000fd0 <HAL_RCC_OscConfig+0x2fc>
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 8106 	bne.w	8000fd0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	f000 be86 	b.w	8001ad6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd4:	d106      	bne.n	8000de4 <HAL_RCC_OscConfig+0x110>
 8000dd6:	4b7d      	ldr	r3, [pc, #500]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a7c      	ldr	r2, [pc, #496]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e030      	b.n	8000e46 <HAL_RCC_OscConfig+0x172>
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10c      	bne.n	8000e08 <HAL_RCC_OscConfig+0x134>
 8000dee:	4b77      	ldr	r3, [pc, #476]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a76      	ldr	r2, [pc, #472]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b74      	ldr	r3, [pc, #464]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a73      	ldr	r2, [pc, #460]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e01e      	b.n	8000e46 <HAL_RCC_OscConfig+0x172>
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e12:	d10c      	bne.n	8000e2e <HAL_RCC_OscConfig+0x15a>
 8000e14:	4b6d      	ldr	r3, [pc, #436]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a6c      	ldr	r2, [pc, #432]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000e1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b6a      	ldr	r3, [pc, #424]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a69      	ldr	r2, [pc, #420]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	e00b      	b.n	8000e46 <HAL_RCC_OscConfig+0x172>
 8000e2e:	4b67      	ldr	r3, [pc, #412]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a66      	ldr	r2, [pc, #408]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b64      	ldr	r3, [pc, #400]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a63      	ldr	r2, [pc, #396]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e44:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e46:	4b61      	ldr	r3, [pc, #388]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4a:	f023 020f 	bic.w	r2, r3, #15
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	495d      	ldr	r1, [pc, #372]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d059      	beq.n	8000f18 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e64:	f7ff fc8c 	bl	8000780 <HAL_GetTick>
 8000e68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6c:	e00a      	b.n	8000e84 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e6e:	f7ff fc87 	bl	8000780 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b64      	cmp	r3, #100	; 0x64
 8000e7c:	d902      	bls.n	8000e84 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	f000 be29 	b.w	8001ad6 <HAL_RCC_OscConfig+0xe02>
 8000e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e88:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e90:	fa93 f3a3 	rbit	r3, r3
 8000e94:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e98:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9c:	fab3 f383 	clz	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d102      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x1e2>
 8000eb0:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	e015      	b.n	8000ee2 <HAL_RCC_OscConfig+0x20e>
 8000eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ece:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ed2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ee6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000eea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000eee:	fa92 f2a2 	rbit	r2, r2
 8000ef2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ef6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000efa:	fab2 f282 	clz	r2, r2
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	f042 0220 	orr.w	r2, r2, #32
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	f002 021f 	and.w	r2, r2, #31
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0ab      	beq.n	8000e6e <HAL_RCC_OscConfig+0x19a>
 8000f16:	e05c      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f18:	f7ff fc32 	bl	8000780 <HAL_GetTick>
 8000f1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f20:	e00a      	b.n	8000f38 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f22:	f7ff fc2d 	bl	8000780 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	; 0x64
 8000f30:	d902      	bls.n	8000f38 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	f000 bdcf 	b.w	8001ad6 <HAL_RCC_OscConfig+0xe02>
 8000f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f40:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d102      	bne.n	8000f6a <HAL_RCC_OscConfig+0x296>
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	e015      	b.n	8000f96 <HAL_RCC_OscConfig+0x2c2>
 8000f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f82:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f86:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_RCC_OscConfig+0x2f8>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f9a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f9e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fa2:	fa92 f2a2 	rbit	r2, r2
 8000fa6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000faa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fae:	fab2 f282 	clz	r2, r2
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	f042 0220 	orr.w	r2, r2, #32
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	f002 021f 	and.w	r2, r2, #31
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1ab      	bne.n	8000f22 <HAL_RCC_OscConfig+0x24e>
 8000fca:	e002      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2fe>
 8000fcc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 816f 	beq.w	80012c0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fe2:	4bd0      	ldr	r3, [pc, #832]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fee:	4bcd      	ldr	r3, [pc, #820]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d16c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x400>
 8000ffa:	4bca      	ldr	r3, [pc, #808]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d166      	bne.n	80010d4 <HAL_RCC_OscConfig+0x400>
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001018:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101c:	fab3 f383 	clz	r3, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	b2db      	uxtb	r3, r3
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b01      	cmp	r3, #1
 800102e:	d102      	bne.n	8001036 <HAL_RCC_OscConfig+0x362>
 8001030:	4bbc      	ldr	r3, [pc, #752]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	e013      	b.n	800105e <HAL_RCC_OscConfig+0x38a>
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800104e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800105a:	4bb2      	ldr	r3, [pc, #712]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	2202      	movs	r2, #2
 8001060:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001064:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001068:	fa92 f2a2 	rbit	r2, r2
 800106c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001070:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001074:	fab2 f282 	clz	r2, r2
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f042 0220 	orr.w	r2, r2, #32
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	f002 021f 	and.w	r2, r2, #31
 8001084:	2101      	movs	r1, #1
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d007      	beq.n	80010a0 <HAL_RCC_OscConfig+0x3cc>
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d002      	beq.n	80010a0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	f000 bd1b 	b.w	8001ad6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a0:	4ba0      	ldr	r3, [pc, #640]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	21f8      	movs	r1, #248	; 0xf8
 80010b0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010b8:	fa91 f1a1 	rbit	r1, r1
 80010bc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010c0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010c4:	fab1 f181 	clz	r1, r1
 80010c8:	b2c9      	uxtb	r1, r1
 80010ca:	408b      	lsls	r3, r1
 80010cc:	4995      	ldr	r1, [pc, #596]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	e0f5      	b.n	80012c0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8085 	beq.w	80011ea <HAL_RCC_OscConfig+0x516>
 80010e0:	2301      	movs	r3, #1
 80010e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001100:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	461a      	mov	r2, r3
 8001108:	2301      	movs	r3, #1
 800110a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fb38 	bl	8000780 <HAL_GetTick>
 8001110:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	e00a      	b.n	800112c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001116:	f7ff fb33 	bl	8000780 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d902      	bls.n	800112c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	f000 bcd5 	b.w	8001ad6 <HAL_RCC_OscConfig+0xe02>
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800113e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	095b      	lsrs	r3, r3, #5
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d102      	bne.n	800115c <HAL_RCC_OscConfig+0x488>
 8001156:	4b73      	ldr	r3, [pc, #460]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	e013      	b.n	8001184 <HAL_RCC_OscConfig+0x4b0>
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001174:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001180:	4b68      	ldr	r3, [pc, #416]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	2202      	movs	r2, #2
 8001186:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800118a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800118e:	fa92 f2a2 	rbit	r2, r2
 8001192:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001196:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800119a:	fab2 f282 	clz	r2, r2
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	f042 0220 	orr.w	r2, r2, #32
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	f002 021f 	and.w	r2, r2, #31
 80011aa:	2101      	movs	r1, #1
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0af      	beq.n	8001116 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	21f8      	movs	r1, #248	; 0xf8
 80011c6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011ce:	fa91 f1a1 	rbit	r1, r1
 80011d2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011d6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011da:	fab1 f181 	clz	r1, r1
 80011de:	b2c9      	uxtb	r1, r1
 80011e0:	408b      	lsls	r3, r1
 80011e2:	4950      	ldr	r1, [pc, #320]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
 80011e8:	e06a      	b.n	80012c0 <HAL_RCC_OscConfig+0x5ec>
 80011ea:	2301      	movs	r3, #1
 80011ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011f4:	fa93 f3a3 	rbit	r3, r3
 80011f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800120a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	461a      	mov	r2, r3
 8001212:	2300      	movs	r3, #0
 8001214:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001216:	f7ff fab3 	bl	8000780 <HAL_GetTick>
 800121a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	e00a      	b.n	8001236 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001220:	f7ff faae 	bl	8000780 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d902      	bls.n	8001236 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	f000 bc50 	b.w	8001ad6 <HAL_RCC_OscConfig+0xe02>
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124c:	fab3 f383 	clz	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d102      	bne.n	8001266 <HAL_RCC_OscConfig+0x592>
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	e013      	b.n	800128e <HAL_RCC_OscConfig+0x5ba>
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800127e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <HAL_RCC_OscConfig+0x650>)
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	2202      	movs	r2, #2
 8001290:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001294:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001298:	fa92 f2a2 	rbit	r2, r2
 800129c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012a4:	fab2 f282 	clz	r2, r2
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	f042 0220 	orr.w	r2, r2, #32
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	f002 021f 	and.w	r2, r2, #31
 80012b4:	2101      	movs	r1, #1
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1af      	bne.n	8001220 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 80da 	beq.w	8001484 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d069      	beq.n	80013ae <HAL_RCC_OscConfig+0x6da>
 80012da:	2301      	movs	r3, #1
 80012dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_RCC_OscConfig+0x654>)
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	461a      	mov	r2, r3
 8001300:	2301      	movs	r3, #1
 8001302:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001304:	f7ff fa3c 	bl	8000780 <HAL_GetTick>
 8001308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130c:	e00e      	b.n	800132c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130e:	f7ff fa37 	bl	8000780 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d906      	bls.n	800132c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e3d9      	b.n	8001ad6 <HAL_RCC_OscConfig+0xe02>
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	10908120 	.word	0x10908120
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800133e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001342:	2202      	movs	r2, #2
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	fa93 f2a3 	rbit	r2, r3
 8001350:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800135a:	2202      	movs	r2, #2
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	fa93 f2a3 	rbit	r2, r3
 8001368:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800136c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	4ba5      	ldr	r3, [pc, #660]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 8001370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001372:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001376:	2102      	movs	r1, #2
 8001378:	6019      	str	r1, [r3, #0]
 800137a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	fa93 f1a3 	rbit	r1, r3
 8001384:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001388:	6019      	str	r1, [r3, #0]
  return result;
 800138a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	fab3 f383 	clz	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	2101      	movs	r1, #1
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0b0      	beq.n	800130e <HAL_RCC_OscConfig+0x63a>
 80013ac:	e06a      	b.n	8001484 <HAL_RCC_OscConfig+0x7b0>
 80013ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	fa93 f2a3 	rbit	r2, r3
 80013c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013c4:	601a      	str	r2, [r3, #0]
  return result;
 80013c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013cc:	fab3 f383 	clz	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b8c      	ldr	r3, [pc, #560]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	461a      	mov	r2, r3
 80013dc:	2300      	movs	r3, #0
 80013de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e0:	f7ff f9ce 	bl	8000780 <HAL_GetTick>
 80013e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	e009      	b.n	80013fe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ea:	f7ff f9c9 	bl	8000780 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e36b      	b.n	8001ad6 <HAL_RCC_OscConfig+0xe02>
 80013fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001402:	2202      	movs	r2, #2
 8001404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800141a:	2202      	movs	r2, #2
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	fa93 f2a3 	rbit	r2, r3
 8001428:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001432:	2202      	movs	r2, #2
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	fa93 f2a3 	rbit	r2, r3
 8001440:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001444:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001446:	4b6f      	ldr	r3, [pc, #444]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 8001448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800144a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800144e:	2102      	movs	r1, #2
 8001450:	6019      	str	r1, [r3, #0]
 8001452:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fa93 f1a3 	rbit	r1, r3
 800145c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001460:	6019      	str	r1, [r3, #0]
  return result;
 8001462:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1b2      	bne.n	80013ea <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8158 	beq.w	8001744 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b5a      	ldr	r3, [pc, #360]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b57      	ldr	r3, [pc, #348]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a56      	ldr	r2, [pc, #344]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b54      	ldr	r3, [pc, #336]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	4b4f      	ldr	r3, [pc, #316]	; (800160c <HAL_RCC_OscConfig+0x938>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d11a      	bne.n	800150e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d8:	4b4c      	ldr	r3, [pc, #304]	; (800160c <HAL_RCC_OscConfig+0x938>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a4b      	ldr	r2, [pc, #300]	; (800160c <HAL_RCC_OscConfig+0x938>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e4:	f7ff f94c 	bl	8000780 <HAL_GetTick>
 80014e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e009      	b.n	8001502 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff f947 	bl	8000780 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e2e9      	b.n	8001ad6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4b42      	ldr	r3, [pc, #264]	; (800160c <HAL_RCC_OscConfig+0x938>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0ef      	beq.n	80014ee <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x852>
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a39      	ldr	r2, [pc, #228]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	e02f      	b.n	8001586 <HAL_RCC_OscConfig+0x8b2>
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10c      	bne.n	800154a <HAL_RCC_OscConfig+0x876>
 8001530:	4b34      	ldr	r3, [pc, #208]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a33      	ldr	r2, [pc, #204]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	6213      	str	r3, [r2, #32]
 800153c:	4b31      	ldr	r3, [pc, #196]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4a30      	ldr	r2, [pc, #192]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 8001542:	f023 0304 	bic.w	r3, r3, #4
 8001546:	6213      	str	r3, [r2, #32]
 8001548:	e01d      	b.n	8001586 <HAL_RCC_OscConfig+0x8b2>
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b05      	cmp	r3, #5
 8001552:	d10c      	bne.n	800156e <HAL_RCC_OscConfig+0x89a>
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a2a      	ldr	r2, [pc, #168]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	e00b      	b.n	8001586 <HAL_RCC_OscConfig+0x8b2>
 800156e:	4b25      	ldr	r3, [pc, #148]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a24      	ldr	r2, [pc, #144]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6213      	str	r3, [r2, #32]
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a21      	ldr	r2, [pc, #132]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 8001580:	f023 0304 	bic.w	r3, r3, #4
 8001584:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d06b      	beq.n	8001668 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff f8f6 	bl	8000780 <HAL_GetTick>
 8001594:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001598:	e00b      	b.n	80015b2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff f8f1 	bl	8000780 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e291      	b.n	8001ad6 <HAL_RCC_OscConfig+0xe02>
 80015b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015b6:	2202      	movs	r2, #2
 80015b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fa93 f2a3 	rbit	r2, r3
 80015c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015ce:	2202      	movs	r2, #2
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	fa93 f2a3 	rbit	r2, r3
 80015dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015e0:	601a      	str	r2, [r3, #0]
  return result;
 80015e2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d109      	bne.n	8001610 <HAL_RCC_OscConfig+0x93c>
 80015fc:	4b01      	ldr	r3, [pc, #4]	; (8001604 <HAL_RCC_OscConfig+0x930>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	e014      	b.n	800162c <HAL_RCC_OscConfig+0x958>
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	10908120 	.word	0x10908120
 800160c:	40007000 	.word	0x40007000
 8001610:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001614:	2202      	movs	r2, #2
 8001616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fa93 f2a3 	rbit	r2, r3
 8001622:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	4bbb      	ldr	r3, [pc, #748]	; (8001918 <HAL_RCC_OscConfig+0xc44>)
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001630:	2102      	movs	r1, #2
 8001632:	6011      	str	r1, [r2, #0]
 8001634:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	fa92 f1a2 	rbit	r1, r2
 800163e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001642:	6011      	str	r1, [r2, #0]
  return result;
 8001644:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	fab2 f282 	clz	r2, r2
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	f002 021f 	and.w	r2, r2, #31
 800165a:	2101      	movs	r1, #1
 800165c:	fa01 f202 	lsl.w	r2, r1, r2
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d099      	beq.n	800159a <HAL_RCC_OscConfig+0x8c6>
 8001666:	e063      	b.n	8001730 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001668:	f7ff f88a 	bl	8000780 <HAL_GetTick>
 800166c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	e00b      	b.n	800168a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff f885 	bl	8000780 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e225      	b.n	8001ad6 <HAL_RCC_OscConfig+0xe02>
 800168a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800168e:	2202      	movs	r2, #2
 8001690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	fa93 f2a3 	rbit	r2, r3
 800169c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016a6:	2202      	movs	r2, #2
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	fa93 f2a3 	rbit	r2, r3
 80016b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016b8:	601a      	str	r2, [r3, #0]
  return result;
 80016ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d102      	bne.n	80016da <HAL_RCC_OscConfig+0xa06>
 80016d4:	4b90      	ldr	r3, [pc, #576]	; (8001918 <HAL_RCC_OscConfig+0xc44>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	e00d      	b.n	80016f6 <HAL_RCC_OscConfig+0xa22>
 80016da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016de:	2202      	movs	r2, #2
 80016e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	fa93 f2a3 	rbit	r2, r3
 80016ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	4b89      	ldr	r3, [pc, #548]	; (8001918 <HAL_RCC_OscConfig+0xc44>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016fa:	2102      	movs	r1, #2
 80016fc:	6011      	str	r1, [r2, #0]
 80016fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	fa92 f1a2 	rbit	r1, r2
 8001708:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800170c:	6011      	str	r1, [r2, #0]
  return result;
 800170e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	fab2 f282 	clz	r2, r2
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	f002 021f 	and.w	r2, r2, #31
 8001724:	2101      	movs	r1, #1
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1a0      	bne.n	8001672 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001730:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001738:	4b77      	ldr	r3, [pc, #476]	; (8001918 <HAL_RCC_OscConfig+0xc44>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	4a76      	ldr	r2, [pc, #472]	; (8001918 <HAL_RCC_OscConfig+0xc44>)
 800173e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001742:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 81c2 	beq.w	8001ad4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001750:	4b71      	ldr	r3, [pc, #452]	; (8001918 <HAL_RCC_OscConfig+0xc44>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	f000 819c 	beq.w	8001a96 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b02      	cmp	r3, #2
 8001766:	f040 8114 	bne.w	8001992 <HAL_RCC_OscConfig+0xcbe>
 800176a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800176e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	fa93 f2a3 	rbit	r2, r3
 800177e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001782:	601a      	str	r2, [r3, #0]
  return result;
 8001784:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001788:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	fab3 f383 	clz	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001794:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	461a      	mov	r2, r3
 800179c:	2300      	movs	r3, #0
 800179e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7fe ffee 	bl	8000780 <HAL_GetTick>
 80017a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a8:	e009      	b.n	80017be <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017aa:	f7fe ffe9 	bl	8000780 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e18b      	b.n	8001ad6 <HAL_RCC_OscConfig+0xe02>
 80017be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f2a3 	rbit	r2, r3
 80017d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017d6:	601a      	str	r2, [r3, #0]
  return result;
 80017d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	095b      	lsrs	r3, r3, #5
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_RCC_OscConfig+0xb24>
 80017f2:	4b49      	ldr	r3, [pc, #292]	; (8001918 <HAL_RCC_OscConfig+0xc44>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	e01b      	b.n	8001830 <HAL_RCC_OscConfig+0xb5c>
 80017f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	fa93 f2a3 	rbit	r2, r3
 800180c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	fa93 f2a3 	rbit	r2, r3
 8001826:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <HAL_RCC_OscConfig+0xc44>)
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001834:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001838:	6011      	str	r1, [r2, #0]
 800183a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	fa92 f1a2 	rbit	r1, r2
 8001844:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001848:	6011      	str	r1, [r2, #0]
  return result;
 800184a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	fab2 f282 	clz	r2, r2
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f042 0220 	orr.w	r2, r2, #32
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	f002 021f 	and.w	r2, r2, #31
 8001860:	2101      	movs	r1, #1
 8001862:	fa01 f202 	lsl.w	r2, r1, r2
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d19e      	bne.n	80017aa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_RCC_OscConfig+0xc44>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	430b      	orrs	r3, r1
 8001882:	4925      	ldr	r1, [pc, #148]	; (8001918 <HAL_RCC_OscConfig+0xc44>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
 8001888:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800188c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018a0:	601a      	str	r2, [r3, #0]
  return result;
 80018a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018a6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	461a      	mov	r2, r3
 80018ba:	2301      	movs	r3, #1
 80018bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7fe ff5f 	bl	8000780 <HAL_GetTick>
 80018c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c6:	e009      	b.n	80018dc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c8:	f7fe ff5a 	bl	8000780 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e0fc      	b.n	8001ad6 <HAL_RCC_OscConfig+0xe02>
 80018dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f2a3 	rbit	r2, r3
 80018f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018f4:	601a      	str	r2, [r3, #0]
  return result;
 80018f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0xc48>
 8001910:	4b01      	ldr	r3, [pc, #4]	; (8001918 <HAL_RCC_OscConfig+0xc44>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	e01e      	b.n	8001954 <HAL_RCC_OscConfig+0xc80>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fa93 f2a3 	rbit	r2, r3
 8001930:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800193a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	fa93 f2a3 	rbit	r2, r3
 800194a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <HAL_RCC_OscConfig+0xe0c>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001958:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800195c:	6011      	str	r1, [r2, #0]
 800195e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	fa92 f1a2 	rbit	r1, r2
 8001968:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800196c:	6011      	str	r1, [r2, #0]
  return result;
 800196e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	fab2 f282 	clz	r2, r2
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	f002 021f 	and.w	r2, r2, #31
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f202 	lsl.w	r2, r1, r2
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d09b      	beq.n	80018c8 <HAL_RCC_OscConfig+0xbf4>
 8001990:	e0a0      	b.n	8001ad4 <HAL_RCC_OscConfig+0xe00>
 8001992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001996:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800199a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019aa:	601a      	str	r2, [r3, #0]
  return result;
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	461a      	mov	r2, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7fe feda 	bl	8000780 <HAL_GetTick>
 80019cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d2:	f7fe fed5 	bl	8000780 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e077      	b.n	8001ad6 <HAL_RCC_OscConfig+0xe02>
 80019e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	fa93 f2a3 	rbit	r2, r3
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	601a      	str	r2, [r3, #0]
  return result;
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	095b      	lsrs	r3, r3, #5
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d102      	bne.n	8001a20 <HAL_RCC_OscConfig+0xd4c>
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_RCC_OscConfig+0xe0c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	e01b      	b.n	8001a58 <HAL_RCC_OscConfig+0xd84>
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	fa93 f2a3 	rbit	r2, r3
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	f107 0318 	add.w	r3, r7, #24
 8001a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	fa93 f2a3 	rbit	r2, r3
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_OscConfig+0xe0c>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f107 0210 	add.w	r2, r7, #16
 8001a5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a60:	6011      	str	r1, [r2, #0]
 8001a62:	f107 0210 	add.w	r2, r7, #16
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	fa92 f1a2 	rbit	r1, r2
 8001a6c:	f107 020c 	add.w	r2, r7, #12
 8001a70:	6011      	str	r1, [r2, #0]
  return result;
 8001a72:	f107 020c 	add.w	r2, r7, #12
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	fab2 f282 	clz	r2, r2
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	f042 0220 	orr.w	r2, r2, #32
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f002 021f 	and.w	r2, r2, #31
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d19e      	bne.n	80019d2 <HAL_RCC_OscConfig+0xcfe>
 8001a94:	e01e      	b.n	8001ad4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e018      	b.n	8001ad6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_RCC_OscConfig+0xe0c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001aac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ab0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d108      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001abe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ac2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b09e      	sub	sp, #120	; 0x78
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e162      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b90      	ldr	r3, [pc, #576]	; (8001d40 <HAL_RCC_ClockConfig+0x25c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d910      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b8d      	ldr	r3, [pc, #564]	; (8001d40 <HAL_RCC_ClockConfig+0x25c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	498b      	ldr	r1, [pc, #556]	; (8001d40 <HAL_RCC_ClockConfig+0x25c>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b89      	ldr	r3, [pc, #548]	; (8001d40 <HAL_RCC_ClockConfig+0x25c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e14a      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b38:	4b82      	ldr	r3, [pc, #520]	; (8001d44 <HAL_RCC_ClockConfig+0x260>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	497f      	ldr	r1, [pc, #508]	; (8001d44 <HAL_RCC_ClockConfig+0x260>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80dc 	beq.w	8001d10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d13c      	bne.n	8001bda <HAL_RCC_ClockConfig+0xf6>
 8001b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xa6>
 8001b84:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <HAL_RCC_ClockConfig+0x260>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	e00f      	b.n	8001baa <HAL_RCC_ClockConfig+0xc6>
 8001b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	667b      	str	r3, [r7, #100]	; 0x64
 8001b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8001b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ba6:	4b67      	ldr	r3, [pc, #412]	; (8001d44 <HAL_RCC_ClockConfig+0x260>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bae:	65ba      	str	r2, [r7, #88]	; 0x58
 8001bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bb2:	fa92 f2a2 	rbit	r2, r2
 8001bb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001bb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bba:	fab2 f282 	clz	r2, r2
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f042 0220 	orr.w	r2, r2, #32
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f002 021f 	and.w	r2, r2, #31
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d17b      	bne.n	8001cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0f3      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d13c      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x178>
 8001be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x128>
 8001c06:	4b4f      	ldr	r3, [pc, #316]	; (8001d44 <HAL_RCC_ClockConfig+0x260>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	e00f      	b.n	8001c2c <HAL_RCC_ClockConfig+0x148>
 8001c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	647b      	str	r3, [r7, #68]	; 0x44
 8001c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8001c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c28:	4b46      	ldr	r3, [pc, #280]	; (8001d44 <HAL_RCC_ClockConfig+0x260>)
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c30:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c34:	fa92 f2a2 	rbit	r2, r2
 8001c38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c3c:	fab2 f282 	clz	r2, r2
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f042 0220 	orr.w	r2, r2, #32
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f002 021f 	and.w	r2, r2, #31
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d13a      	bne.n	8001cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0b2      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x2de>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	095b      	lsrs	r3, r3, #5
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d102      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x1a0>
 8001c7e:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_RCC_ClockConfig+0x260>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	e00d      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1bc>
 8001c84:	2302      	movs	r3, #2
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c90:	2302      	movs	r3, #2
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <HAL_RCC_ClockConfig+0x260>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	61ba      	str	r2, [r7, #24]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	fa92 f2a2 	rbit	r2, r2
 8001caa:	617a      	str	r2, [r7, #20]
  return result;
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	fab2 f282 	clz	r2, r2
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f042 0220 	orr.w	r2, r2, #32
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	f002 021f 	and.w	r2, r2, #31
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e079      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_ClockConfig+0x260>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f023 0203 	bic.w	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	491a      	ldr	r1, [pc, #104]	; (8001d44 <HAL_RCC_ClockConfig+0x260>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce0:	f7fe fd4e 	bl	8000780 <HAL_GetTick>
 8001ce4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7fe fd4a 	bl	8000780 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e061      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_RCC_ClockConfig+0x260>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 020c 	and.w	r2, r3, #12
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d1eb      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_ClockConfig+0x25c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d214      	bcs.n	8001d48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_RCC_ClockConfig+0x25c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 0207 	bic.w	r2, r3, #7
 8001d26:	4906      	ldr	r1, [pc, #24]	; (8001d40 <HAL_RCC_ClockConfig+0x25c>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <HAL_RCC_ClockConfig+0x25c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e040      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x2de>
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_ClockConfig+0x2e8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	491a      	ldr	r1, [pc, #104]	; (8001dcc <HAL_RCC_ClockConfig+0x2e8>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_RCC_ClockConfig+0x2e8>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4912      	ldr	r1, [pc, #72]	; (8001dcc <HAL_RCC_ClockConfig+0x2e8>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d86:	f000 f829 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d8a:	4601      	mov	r1, r0
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_RCC_ClockConfig+0x2e8>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d94:	22f0      	movs	r2, #240	; 0xf0
 8001d96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	fa92 f2a2 	rbit	r2, r2
 8001d9e:	60fa      	str	r2, [r7, #12]
  return result;
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	fab2 f282 	clz	r2, r2
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	40d3      	lsrs	r3, r2
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x2ec>)
 8001dac:	5cd3      	ldrb	r3, [r2, r3]
 8001dae:	fa21 f303 	lsr.w	r3, r1, r3
 8001db2:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <HAL_RCC_ClockConfig+0x2f0>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_RCC_ClockConfig+0x2f4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fc02 	bl	80005c4 <HAL_InitTick>
  
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3778      	adds	r7, #120	; 0x78
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08005644 	.word	0x08005644
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b08b      	sub	sp, #44	; 0x2c
 8001de0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x30>
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x36>
 8001e0a:	e03c      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e0e:	623b      	str	r3, [r7, #32]
      break;
 8001e10:	e03c      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	fa92 f2a2 	rbit	r2, r2
 8001e24:	607a      	str	r2, [r7, #4]
  return result;
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	fab2 f282 	clz	r2, r2
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	40d3      	lsrs	r3, r2
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	220f      	movs	r2, #15
 8001e40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	fa92 f2a2 	rbit	r2, r2
 8001e48:	60fa      	str	r2, [r7, #12]
  return result;
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	fab2 f282 	clz	r2, r2
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	40d3      	lsrs	r3, r2
 8001e54:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e64:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
 8001e74:	e004      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	623b      	str	r3, [r7, #32]
      break;
 8001e84:	e002      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e88:	623b      	str	r3, [r7, #32]
      break;
 8001e8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	372c      	adds	r7, #44	; 0x2c
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	007a1200 	.word	0x007a1200
 8001ea4:	0800565c 	.word	0x0800565c
 8001ea8:	0800566c 	.word	0x0800566c
 8001eac:	003d0900 	.word	0x003d0900

08001eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001ece:	f7ff ffef 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001edc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ee0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	fa92 f2a2 	rbit	r2, r2
 8001ee8:	603a      	str	r2, [r7, #0]
  return result;
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	fab2 f282 	clz	r2, r2
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	40d3      	lsrs	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08005654 	.word	0x08005654

08001f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f12:	f7ff ffcd 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001f16:	4601      	mov	r1, r0
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	fa92 f2a2 	rbit	r2, r2
 8001f2c:	603a      	str	r2, [r7, #0]
  return result;
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	fab2 f282 	clz	r2, r2
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	40d3      	lsrs	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08005654 	.word	0x08005654

08001f50 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_RCC_GetClockConfig+0x5c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_RCC_GetClockConfig+0x5c>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_RCC_GetClockConfig+0x5c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_GetClockConfig+0x5c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	08db      	lsrs	r3, r3, #3
 8001f8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_RCC_GetClockConfig+0x60>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0207 	and.w	r2, r3, #7
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	601a      	str	r2, [r3, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40022000 	.word	0x40022000

08001fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e049      	b.n	800205a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f841 	bl	8002062 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f000 f9dc 	bl	80023b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d001      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e03b      	b.n	8002108 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_TIM_Base_Start_IT+0x9c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_TIM_Base_Start_IT+0x4e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ba:	d004      	beq.n	80020c6 <HAL_TIM_Base_Start_IT+0x4e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a15      	ldr	r2, [pc, #84]	; (8002118 <HAL_TIM_Base_Start_IT+0xa0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d115      	bne.n	80020f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_TIM_Base_Start_IT+0xa4>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d015      	beq.n	8002104 <HAL_TIM_Base_Start_IT+0x8c>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020de:	d011      	beq.n	8002104 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f0:	e008      	b.n	8002104 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e000      	b.n	8002106 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002104:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40012c00 	.word	0x40012c00
 8002118:	40014000 	.word	0x40014000
 800211c:	00010007 	.word	0x00010007

08002120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d122      	bne.n	800217c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b02      	cmp	r3, #2
 8002142:	d11b      	bne.n	800217c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0202 	mvn.w	r2, #2
 800214c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f905 	bl	8002372 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8f7 	bl	800235e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f908 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d122      	bne.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b04      	cmp	r3, #4
 8002196:	d11b      	bne.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0204 	mvn.w	r2, #4
 80021a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8db 	bl	8002372 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f8cd 	bl	800235e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f8de 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0208 	mvn.w	r2, #8
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2204      	movs	r2, #4
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8b1 	bl	8002372 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f8a3 	bl	800235e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f8b4 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b10      	cmp	r3, #16
 8002230:	d122      	bne.n	8002278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b10      	cmp	r3, #16
 800223e:	d11b      	bne.n	8002278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0210 	mvn.w	r2, #16
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2208      	movs	r2, #8
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f887 	bl	8002372 <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f879 	bl	800235e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f88a 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0201 	mvn.w	r2, #1
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe f910 	bl	80004c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	d10e      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022bc:	2b80      	cmp	r3, #128	; 0x80
 80022be:	d107      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8e8 	bl	80024a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022de:	d10e      	bne.n	80022fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	2b80      	cmp	r3, #128	; 0x80
 80022ec:	d107      	bne.n	80022fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f8db 	bl	80024b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002308:	2b40      	cmp	r3, #64	; 0x40
 800230a:	d10e      	bne.n	800232a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	2b40      	cmp	r3, #64	; 0x40
 8002318:	d107      	bne.n	800232a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f838 	bl	800239a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b20      	cmp	r3, #32
 8002336:	d10e      	bne.n	8002356 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b20      	cmp	r3, #32
 8002344:	d107      	bne.n	8002356 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f06f 0220 	mvn.w	r2, #32
 800234e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f89b 	bl	800248c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a2e      	ldr	r2, [pc, #184]	; (800247c <TIM_Base_SetConfig+0xcc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d003      	beq.n	80023d0 <TIM_Base_SetConfig+0x20>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ce:	d108      	bne.n	80023e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a25      	ldr	r2, [pc, #148]	; (800247c <TIM_Base_SetConfig+0xcc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00f      	beq.n	800240a <TIM_Base_SetConfig+0x5a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f0:	d00b      	beq.n	800240a <TIM_Base_SetConfig+0x5a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a22      	ldr	r2, [pc, #136]	; (8002480 <TIM_Base_SetConfig+0xd0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <TIM_Base_SetConfig+0x5a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a21      	ldr	r2, [pc, #132]	; (8002484 <TIM_Base_SetConfig+0xd4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d003      	beq.n	800240a <TIM_Base_SetConfig+0x5a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a20      	ldr	r2, [pc, #128]	; (8002488 <TIM_Base_SetConfig+0xd8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d108      	bne.n	800241c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a0e      	ldr	r2, [pc, #56]	; (800247c <TIM_Base_SetConfig+0xcc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00b      	beq.n	8002460 <TIM_Base_SetConfig+0xb0>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <TIM_Base_SetConfig+0xd0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d007      	beq.n	8002460 <TIM_Base_SetConfig+0xb0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a0c      	ldr	r2, [pc, #48]	; (8002484 <TIM_Base_SetConfig+0xd4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d003      	beq.n	8002460 <TIM_Base_SetConfig+0xb0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <TIM_Base_SetConfig+0xd8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d103      	bne.n	8002468 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	615a      	str	r2, [r3, #20]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40014000 	.word	0x40014000
 8002484:	40014400 	.word	0x40014400
 8002488:	40014800 	.word	0x40014800

0800248c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e040      	b.n	800255c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe f828 	bl	8000540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	; 0x24
 80024f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f82c 	bl	8002564 <UART_SetConfig>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e022      	b.n	800255c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f958 	bl	80027d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f9df 	bl	8002918 <UART_CheckIdleState>
 800255a:	4603      	mov	r3, r0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b8b      	ldr	r3, [pc, #556]	; (80027bc <UART_SetConfig+0x258>)
 8002590:	4013      	ands	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	6979      	ldr	r1, [r7, #20]
 8002598:	430b      	orrs	r3, r1
 800259a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a79      	ldr	r2, [pc, #484]	; (80027c0 <UART_SetConfig+0x25c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d121      	bne.n	8002624 <UART_SetConfig+0xc0>
 80025e0:	4b78      	ldr	r3, [pc, #480]	; (80027c4 <UART_SetConfig+0x260>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d817      	bhi.n	800261c <UART_SetConfig+0xb8>
 80025ec:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <UART_SetConfig+0x90>)
 80025ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f2:	bf00      	nop
 80025f4:	08002605 	.word	0x08002605
 80025f8:	08002611 	.word	0x08002611
 80025fc:	08002617 	.word	0x08002617
 8002600:	0800260b 	.word	0x0800260b
 8002604:	2300      	movs	r3, #0
 8002606:	77fb      	strb	r3, [r7, #31]
 8002608:	e01e      	b.n	8002648 <UART_SetConfig+0xe4>
 800260a:	2302      	movs	r3, #2
 800260c:	77fb      	strb	r3, [r7, #31]
 800260e:	e01b      	b.n	8002648 <UART_SetConfig+0xe4>
 8002610:	2304      	movs	r3, #4
 8002612:	77fb      	strb	r3, [r7, #31]
 8002614:	e018      	b.n	8002648 <UART_SetConfig+0xe4>
 8002616:	2308      	movs	r3, #8
 8002618:	77fb      	strb	r3, [r7, #31]
 800261a:	e015      	b.n	8002648 <UART_SetConfig+0xe4>
 800261c:	2310      	movs	r3, #16
 800261e:	77fb      	strb	r3, [r7, #31]
 8002620:	bf00      	nop
 8002622:	e011      	b.n	8002648 <UART_SetConfig+0xe4>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a67      	ldr	r2, [pc, #412]	; (80027c8 <UART_SetConfig+0x264>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d102      	bne.n	8002634 <UART_SetConfig+0xd0>
 800262e:	2300      	movs	r3, #0
 8002630:	77fb      	strb	r3, [r7, #31]
 8002632:	e009      	b.n	8002648 <UART_SetConfig+0xe4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a64      	ldr	r2, [pc, #400]	; (80027cc <UART_SetConfig+0x268>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d102      	bne.n	8002644 <UART_SetConfig+0xe0>
 800263e:	2300      	movs	r3, #0
 8002640:	77fb      	strb	r3, [r7, #31]
 8002642:	e001      	b.n	8002648 <UART_SetConfig+0xe4>
 8002644:	2310      	movs	r3, #16
 8002646:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002650:	d15c      	bne.n	800270c <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8002652:	7ffb      	ldrb	r3, [r7, #31]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d828      	bhi.n	80026aa <UART_SetConfig+0x146>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <UART_SetConfig+0xfc>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002685 	.word	0x08002685
 8002664:	0800268d 	.word	0x0800268d
 8002668:	08002695 	.word	0x08002695
 800266c:	080026ab 	.word	0x080026ab
 8002670:	0800269b 	.word	0x0800269b
 8002674:	080026ab 	.word	0x080026ab
 8002678:	080026ab 	.word	0x080026ab
 800267c:	080026ab 	.word	0x080026ab
 8002680:	080026a3 	.word	0x080026a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002684:	f7ff fc20 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8002688:	61b8      	str	r0, [r7, #24]
        break;
 800268a:	e013      	b.n	80026b4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800268c:	f7ff fc3e 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 8002690:	61b8      	str	r0, [r7, #24]
        break;
 8002692:	e00f      	b.n	80026b4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002694:	4b4e      	ldr	r3, [pc, #312]	; (80027d0 <UART_SetConfig+0x26c>)
 8002696:	61bb      	str	r3, [r7, #24]
        break;
 8002698:	e00c      	b.n	80026b4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800269a:	f7ff fb9f 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 800269e:	61b8      	str	r0, [r7, #24]
        break;
 80026a0:	e008      	b.n	80026b4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026a6:	61bb      	str	r3, [r7, #24]
        break;
 80026a8:	e004      	b.n	80026b4 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	77bb      	strb	r3, [r7, #30]
        break;
 80026b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d074      	beq.n	80027a4 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	005a      	lsls	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	441a      	add	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d916      	bls.n	8002706 <UART_SetConfig+0x1a2>
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026de:	d212      	bcs.n	8002706 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f023 030f 	bic.w	r3, r3, #15
 80026e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	89fb      	ldrh	r3, [r7, #14]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	89fa      	ldrh	r2, [r7, #14]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	e04e      	b.n	80027a4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	77bb      	strb	r3, [r7, #30]
 800270a:	e04b      	b.n	80027a4 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 800270c:	7ffb      	ldrb	r3, [r7, #31]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d827      	bhi.n	8002762 <UART_SetConfig+0x1fe>
 8002712:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <UART_SetConfig+0x1b4>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	0800273d 	.word	0x0800273d
 800271c:	08002745 	.word	0x08002745
 8002720:	0800274d 	.word	0x0800274d
 8002724:	08002763 	.word	0x08002763
 8002728:	08002753 	.word	0x08002753
 800272c:	08002763 	.word	0x08002763
 8002730:	08002763 	.word	0x08002763
 8002734:	08002763 	.word	0x08002763
 8002738:	0800275b 	.word	0x0800275b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800273c:	f7ff fbc4 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8002740:	61b8      	str	r0, [r7, #24]
        break;
 8002742:	e013      	b.n	800276c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002744:	f7ff fbe2 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 8002748:	61b8      	str	r0, [r7, #24]
        break;
 800274a:	e00f      	b.n	800276c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <UART_SetConfig+0x26c>)
 800274e:	61bb      	str	r3, [r7, #24]
        break;
 8002750:	e00c      	b.n	800276c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002752:	f7ff fb43 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8002756:	61b8      	str	r0, [r7, #24]
        break;
 8002758:	e008      	b.n	800276c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800275a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800275e:	61bb      	str	r3, [r7, #24]
        break;
 8002760:	e004      	b.n	800276c <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	77bb      	strb	r3, [r7, #30]
        break;
 800276a:	bf00      	nop
    }

    if (pclk != 0U)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d018      	beq.n	80027a4 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	085a      	lsrs	r2, r3, #1
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	441a      	add	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	b29b      	uxth	r3, r3
 8002786:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	d908      	bls.n	80027a0 <UART_SetConfig+0x23c>
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002794:	d204      	bcs.n	80027a0 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	e001      	b.n	80027a4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80027b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	efff69f3 	.word	0xefff69f3
 80027c0:	40013800 	.word	0x40013800
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40004400 	.word	0x40004400
 80027cc:	40004800 	.word	0x40004800
 80027d0:	007a1200 	.word	0x007a1200

080027d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01a      	beq.n	80028ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028d2:	d10a      	bne.n	80028ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	605a      	str	r2, [r3, #4]
  }
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002928:	f7fd ff2a 	bl	8000780 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b08      	cmp	r3, #8
 800293a:	d10e      	bne.n	800295a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800293c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f82d 	bl	80029aa <UART_WaitOnFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e023      	b.n	80029a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b04      	cmp	r3, #4
 8002966:	d10e      	bne.n	8002986 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f817 	bl	80029aa <UART_WaitOnFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e00d      	b.n	80029a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2220      	movs	r2, #32
 800298a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b09c      	sub	sp, #112	; 0x70
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4613      	mov	r3, r2
 80029b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ba:	e0a5      	b.n	8002b08 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c2:	f000 80a1 	beq.w	8002b08 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7fd fedb 	bl	8000780 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <UART_WaitOnFlagUntilTimeout+0x32>
 80029d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d13e      	bne.n	8002a5a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e4:	e853 3f00 	ldrex	r3, [r3]
 80029e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80029ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029f0:	667b      	str	r3, [r7, #100]	; 0x64
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a02:	e841 2300 	strex	r3, r2, [r1]
 8002a06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1e6      	bne.n	80029dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3308      	adds	r3, #8
 8002a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a18:	e853 3f00 	ldrex	r3, [r3]
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	663b      	str	r3, [r7, #96]	; 0x60
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002a30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a36:	e841 2300 	strex	r3, r2, [r1]
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1e5      	bne.n	8002a0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e067      	b.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d04f      	beq.n	8002b08 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a76:	d147      	bne.n	8002b08 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	e853 3f00 	ldrex	r3, [r3]
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa8:	e841 2300 	strex	r3, r2, [r1]
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e6      	bne.n	8002a82 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3308      	adds	r3, #8
 8002aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	e853 3f00 	ldrex	r3, [r3]
 8002ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	66bb      	str	r3, [r7, #104]	; 0x68
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ad4:	623a      	str	r2, [r7, #32]
 8002ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad8:	69f9      	ldr	r1, [r7, #28]
 8002ada:	6a3a      	ldr	r2, [r7, #32]
 8002adc:	e841 2300 	strex	r3, r2, [r1]
 8002ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e5      	bne.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e010      	b.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4013      	ands	r3, r2
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	f43f af4a 	beq.w	80029bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3770      	adds	r7, #112	; 0x70
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b3a:	f3ef 8305 	mrs	r3, IPSR
 8002b3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10f      	bne.n	8002b66 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b46:	f3ef 8310 	mrs	r3, PRIMASK
 8002b4a:	607b      	str	r3, [r7, #4]
  return(result);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <osKernelInitialize+0x32>
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <osKernelInitialize+0x64>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d109      	bne.n	8002b6e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8002b5e:	603b      	str	r3, [r7, #0]
  return(result);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002b66:	f06f 0305 	mvn.w	r3, #5
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	e00c      	b.n	8002b88 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <osKernelInitialize+0x64>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <osKernelInitialize+0x64>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e002      	b.n	8002b88 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002b88:	68fb      	ldr	r3, [r7, #12]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000034 	.word	0x20000034

08002b9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba2:	f3ef 8305 	mrs	r3, IPSR
 8002ba6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bae:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb2:	607b      	str	r3, [r7, #4]
  return(result);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <osKernelStart+0x32>
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <osKernelStart+0x64>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d109      	bne.n	8002bd6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8002bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002bce:	f06f 0305 	mvn.w	r3, #5
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	e00e      	b.n	8002bf4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <osKernelStart+0x64>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <osKernelStart+0x64>)
 8002be0:	2202      	movs	r2, #2
 8002be2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002be4:	f001 f86a 	bl	8003cbc <vTaskStartScheduler>
      stat = osOK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e002      	b.n	8002bf4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000034 	.word	0x20000034

08002c04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b092      	sub	sp, #72	; 0x48
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c14:	f3ef 8305 	mrs	r3, IPSR
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f040 8094 	bne.w	8002d4a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c22:	f3ef 8310 	mrs	r3, PRIMASK
 8002c26:	623b      	str	r3, [r7, #32]
  return(result);
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 808d 	bne.w	8002d4a <osThreadNew+0x146>
 8002c30:	4b48      	ldr	r3, [pc, #288]	; (8002d54 <osThreadNew+0x150>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d106      	bne.n	8002c46 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c38:	f3ef 8311 	mrs	r3, BASEPRI
 8002c3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 8082 	bne.w	8002d4a <osThreadNew+0x146>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d07e      	beq.n	8002d4a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002c50:	2318      	movs	r3, #24
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002c54:	2300      	movs	r3, #0
 8002c56:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002c58:	f107 031b 	add.w	r3, r7, #27
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d045      	beq.n	8002cf6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <osThreadNew+0x74>
        name = attr->name;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <osThreadNew+0x9a>
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	2b38      	cmp	r3, #56	; 0x38
 8002c90:	d805      	bhi.n	8002c9e <osThreadNew+0x9a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <osThreadNew+0x9e>
        return (NULL);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e054      	b.n	8002d4c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	089b      	lsrs	r3, r3, #2
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00e      	beq.n	8002cd8 <osThreadNew+0xd4>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b5b      	cmp	r3, #91	; 0x5b
 8002cc0:	d90a      	bls.n	8002cd8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d006      	beq.n	8002cd8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <osThreadNew+0xd4>
        mem = 1;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd6:	e010      	b.n	8002cfa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10c      	bne.n	8002cfa <osThreadNew+0xf6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <osThreadNew+0xf6>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <osThreadNew+0xf6>
          mem = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf4:	e001      	b.n	8002cfa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d110      	bne.n	8002d22 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d08:	9202      	str	r2, [sp, #8]
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fe08 	bl	800392c <xTaskCreateStatic>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e013      	b.n	8002d4a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d110      	bne.n	8002d4a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fe4f 	bl	80039de <xTaskCreate>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <osThreadNew+0x146>
          hTask = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d4a:	697b      	ldr	r3, [r7, #20]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3738      	adds	r7, #56	; 0x38
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000034 	.word	0x20000034

08002d58 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d60:	f3ef 8305 	mrs	r3, IPSR
 8002d64:	613b      	str	r3, [r7, #16]
  return(result);
 8002d66:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10f      	bne.n	8002d8c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d70:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <osDelay+0x34>
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <osDelay+0x58>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d109      	bne.n	8002d94 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d80:	f3ef 8311 	mrs	r3, BASEPRI
 8002d84:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <osDelay+0x3c>
    stat = osErrorISR;
 8002d8c:	f06f 0305 	mvn.w	r3, #5
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e007      	b.n	8002da4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 ff58 	bl	8003c54 <vTaskDelay>
    }
  }

  return (stat);
 8002da4:	697b      	ldr	r3, [r7, #20]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000034 	.word	0x20000034

08002db4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002dc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4a06      	ldr	r2, [pc, #24]	; (8002de4 <vApplicationGetIdleTaskMemory+0x30>)
 8002dca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	601a      	str	r2, [r3, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000038 	.word	0x20000038
 8002de4:	20000094 	.word	0x20000094

08002de8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <vApplicationGetTimerTaskMemory+0x2c>)
 8002df8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4a06      	ldr	r2, [pc, #24]	; (8002e18 <vApplicationGetTimerTaskMemory+0x30>)
 8002dfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e06:	601a      	str	r2, [r3, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	20000294 	.word	0x20000294
 8002e18:	200002f0 	.word	0x200002f0

08002e1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f103 0208 	add.w	r2, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f103 0208 	add.w	r2, r3, #8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f103 0208 	add.w	r2, r3, #8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d103      	bne.n	8002ede <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	e00c      	b.n	8002ef8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e002      	b.n	8002eec <vListInsert+0x2e>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d2f6      	bcs.n	8002ee6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	601a      	str	r2, [r3, #0]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6892      	ldr	r2, [r2, #8]
 8002f46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6852      	ldr	r2, [r2, #4]
 8002f50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d103      	bne.n	8002f64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	1e5a      	subs	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	e7fe      	b.n	8002faa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002fac:	f001 ffd6 	bl	8004f5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	441a      	add	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	441a      	add	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	22ff      	movs	r2, #255	; 0xff
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	22ff      	movs	r2, #255	; 0xff
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d114      	bne.n	800302c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01a      	beq.n	8003040 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3310      	adds	r3, #16
 800300e:	4618      	mov	r0, r3
 8003010:	f001 f8da 	bl	80041c8 <xTaskRemoveFromEventList>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d012      	beq.n	8003040 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <xQueueGenericReset+0xcc>)
 800301c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	e009      	b.n	8003040 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3310      	adds	r3, #16
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fef3 	bl	8002e1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3324      	adds	r3, #36	; 0x24
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff feee 	bl	8002e1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003040:	f001 ffba 	bl	8004fb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003044:	2301      	movs	r3, #1
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	e000ed04 	.word	0xe000ed04

08003054 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	; 0x38
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <xQueueGenericCreateStatic+0x28>
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
 800307a:	e7fe      	b.n	800307a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <xQueueGenericCreateStatic+0x42>
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
 8003094:	e7fe      	b.n	8003094 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <xQueueGenericCreateStatic+0x4e>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <xQueueGenericCreateStatic+0x52>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <xQueueGenericCreateStatic+0x54>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <xQueueGenericCreateStatic+0x6c>
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	623b      	str	r3, [r7, #32]
 80030be:	e7fe      	b.n	80030be <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <xQueueGenericCreateStatic+0x78>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <xQueueGenericCreateStatic+0x7c>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <xQueueGenericCreateStatic+0x7e>
 80030d0:	2300      	movs	r3, #0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <xQueueGenericCreateStatic+0x96>
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	e7fe      	b.n	80030e8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030ea:	2350      	movs	r3, #80	; 0x50
 80030ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b50      	cmp	r3, #80	; 0x50
 80030f2:	d009      	beq.n	8003108 <xQueueGenericCreateStatic+0xb4>
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	e7fe      	b.n	8003106 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800311a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f805 	bl	8003138 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003130:	4618      	mov	r0, r3
 8003132:	3730      	adds	r7, #48	; 0x30
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e002      	b.n	800315a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003166:	2101      	movs	r1, #1
 8003168:	69b8      	ldr	r0, [r7, #24]
 800316a:	f7ff ff0b 	bl	8002f84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08e      	sub	sp, #56	; 0x38
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800318e:	2300      	movs	r3, #0
 8003190:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <xQueueGenericSend+0x30>
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ae:	e7fe      	b.n	80031ae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <xQueueGenericSend+0x3e>
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <xQueueGenericSend+0x42>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <xQueueGenericSend+0x44>
 80031c2:	2300      	movs	r3, #0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <xQueueGenericSend+0x5c>
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
 80031da:	e7fe      	b.n	80031da <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d103      	bne.n	80031ea <xQueueGenericSend+0x6a>
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <xQueueGenericSend+0x6e>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <xQueueGenericSend+0x70>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <xQueueGenericSend+0x88>
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	623b      	str	r3, [r7, #32]
 8003206:	e7fe      	b.n	8003206 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003208:	f001 f99a 	bl	8004540 <xTaskGetSchedulerState>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <xQueueGenericSend+0x98>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <xQueueGenericSend+0x9c>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <xQueueGenericSend+0x9e>
 800321c:	2300      	movs	r3, #0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <xQueueGenericSend+0xb6>
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	e7fe      	b.n	8003234 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003236:	f001 fe91 	bl	8004f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <xQueueGenericSend+0xcc>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d129      	bne.n	80032a0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003252:	f000 f9ff 	bl	8003654 <prvCopyDataToQueue>
 8003256:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	3324      	adds	r3, #36	; 0x24
 8003264:	4618      	mov	r0, r3
 8003266:	f000 ffaf 	bl	80041c8 <xTaskRemoveFromEventList>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003270:	4b3f      	ldr	r3, [pc, #252]	; (8003370 <xQueueGenericSend+0x1f0>)
 8003272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	e00a      	b.n	8003298 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003288:	4b39      	ldr	r3, [pc, #228]	; (8003370 <xQueueGenericSend+0x1f0>)
 800328a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003298:	f001 fe8e 	bl	8004fb8 <vPortExitCritical>
				return pdPASS;
 800329c:	2301      	movs	r3, #1
 800329e:	e063      	b.n	8003368 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032a6:	f001 fe87 	bl	8004fb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e05c      	b.n	8003368 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 ffe7 	bl	800428c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032be:	2301      	movs	r3, #1
 80032c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032c2:	f001 fe79 	bl	8004fb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032c6:	f000 fd5d 	bl	8003d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032ca:	f001 fe47 	bl	8004f5c <vPortEnterCritical>
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d4:	b25b      	sxtb	r3, r3
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d103      	bne.n	80032e4 <xQueueGenericSend+0x164>
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d103      	bne.n	80032fa <xQueueGenericSend+0x17a>
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032fa:	f001 fe5d 	bl	8004fb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032fe:	1d3a      	adds	r2, r7, #4
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f000 ffd6 	bl	80042b8 <xTaskCheckForTimeOut>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d124      	bne.n	800335c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003314:	f000 fa96 	bl	8003844 <prvIsQueueFull>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d018      	beq.n	8003350 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	3310      	adds	r3, #16
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f000 ff00 	bl	800412c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800332c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800332e:	f000 fa21 	bl	8003774 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003332:	f000 fd35 	bl	8003da0 <xTaskResumeAll>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	f47f af7c 	bne.w	8003236 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <xQueueGenericSend+0x1f0>)
 8003340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	e772      	b.n	8003236 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003352:	f000 fa0f 	bl	8003774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003356:	f000 fd23 	bl	8003da0 <xTaskResumeAll>
 800335a:	e76c      	b.n	8003236 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800335c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800335e:	f000 fa09 	bl	8003774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003362:	f000 fd1d 	bl	8003da0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003366:	2300      	movs	r3, #0
		}
	}
}
 8003368:	4618      	mov	r0, r3
 800336a:	3738      	adds	r7, #56	; 0x38
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	e000ed04 	.word	0xe000ed04

08003374 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08e      	sub	sp, #56	; 0x38
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <xQueueGenericSendFromISR+0x2c>
 800338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	e7fe      	b.n	800339e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d103      	bne.n	80033ae <xQueueGenericSendFromISR+0x3a>
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <xQueueGenericSendFromISR+0x3e>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <xQueueGenericSendFromISR+0x40>
 80033b2:	2300      	movs	r3, #0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <xQueueGenericSendFromISR+0x58>
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	e7fe      	b.n	80033ca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d103      	bne.n	80033da <xQueueGenericSendFromISR+0x66>
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <xQueueGenericSendFromISR+0x6a>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <xQueueGenericSendFromISR+0x6c>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d109      	bne.n	80033f8 <xQueueGenericSendFromISR+0x84>
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	e7fe      	b.n	80033f6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033f8:	f001 fe8c 	bl	8005114 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033fc:	f3ef 8211 	mrs	r2, BASEPRI
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	61ba      	str	r2, [r7, #24]
 8003412:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003414:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <xQueueGenericSendFromISR+0xb6>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d12c      	bne.n	8003484 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800343a:	f000 f90b 	bl	8003654 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800343e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d112      	bne.n	800346e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d016      	beq.n	800347e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	3324      	adds	r3, #36	; 0x24
 8003454:	4618      	mov	r0, r3
 8003456:	f000 feb7 	bl	80041c8 <xTaskRemoveFromEventList>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00e      	beq.n	800347e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e007      	b.n	800347e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800346e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003472:	3301      	adds	r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	b25a      	sxtb	r2, r3
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800347e:	2301      	movs	r3, #1
 8003480:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003482:	e001      	b.n	8003488 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003484:	2300      	movs	r3, #0
 8003486:	637b      	str	r3, [r7, #52]	; 0x34
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003494:	4618      	mov	r0, r3
 8003496:	3738      	adds	r7, #56	; 0x38
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	; 0x30
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <xQueueReceive+0x2e>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	623b      	str	r3, [r7, #32]
 80034c8:	e7fe      	b.n	80034c8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d103      	bne.n	80034d8 <xQueueReceive+0x3c>
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <xQueueReceive+0x40>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <xQueueReceive+0x42>
 80034dc:	2300      	movs	r3, #0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <xQueueReceive+0x5a>
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	e7fe      	b.n	80034f4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034f6:	f001 f823 	bl	8004540 <xTaskGetSchedulerState>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <xQueueReceive+0x6a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <xQueueReceive+0x6e>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <xQueueReceive+0x70>
 800350a:	2300      	movs	r3, #0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d109      	bne.n	8003524 <xQueueReceive+0x88>
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e7fe      	b.n	8003522 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003524:	f001 fd1a 	bl	8004f5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01f      	beq.n	8003574 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003538:	f000 f8f6 	bl	8003728 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00f      	beq.n	800356c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	3310      	adds	r3, #16
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fe39 	bl	80041c8 <xTaskRemoveFromEventList>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800355c:	4b3c      	ldr	r3, [pc, #240]	; (8003650 <xQueueReceive+0x1b4>)
 800355e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800356c:	f001 fd24 	bl	8004fb8 <vPortExitCritical>
				return pdPASS;
 8003570:	2301      	movs	r3, #1
 8003572:	e069      	b.n	8003648 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800357a:	f001 fd1d 	bl	8004fb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800357e:	2300      	movs	r3, #0
 8003580:	e062      	b.n	8003648 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fe7d 	bl	800428c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003592:	2301      	movs	r3, #1
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003596:	f001 fd0f 	bl	8004fb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800359a:	f000 fbf3 	bl	8003d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800359e:	f001 fcdd 	bl	8004f5c <vPortEnterCritical>
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a8:	b25b      	sxtb	r3, r3
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d103      	bne.n	80035b8 <xQueueReceive+0x11c>
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035be:	b25b      	sxtb	r3, r3
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d103      	bne.n	80035ce <xQueueReceive+0x132>
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ce:	f001 fcf3 	bl	8004fb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035d2:	1d3a      	adds	r2, r7, #4
 80035d4:	f107 0310 	add.w	r3, r7, #16
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fe6c 	bl	80042b8 <xTaskCheckForTimeOut>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d123      	bne.n	800362e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035e8:	f000 f916 	bl	8003818 <prvIsQueueEmpty>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d017      	beq.n	8003622 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	3324      	adds	r3, #36	; 0x24
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fd96 	bl	800412c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003602:	f000 f8b7 	bl	8003774 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003606:	f000 fbcb 	bl	8003da0 <xTaskResumeAll>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d189      	bne.n	8003524 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003610:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <xQueueReceive+0x1b4>)
 8003612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	e780      	b.n	8003524 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003624:	f000 f8a6 	bl	8003774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003628:	f000 fbba 	bl	8003da0 <xTaskResumeAll>
 800362c:	e77a      	b.n	8003524 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800362e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003630:	f000 f8a0 	bl	8003774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003634:	f000 fbb4 	bl	8003da0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800363a:	f000 f8ed 	bl	8003818 <prvIsQueueEmpty>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	f43f af6f 	beq.w	8003524 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003646:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003648:	4618      	mov	r0, r3
 800364a:	3730      	adds	r7, #48	; 0x30
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10d      	bne.n	800368e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d14d      	bne.n	8003716 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 ff7c 	bl	800457c <xTaskPriorityDisinherit>
 8003684:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	605a      	str	r2, [r3, #4]
 800368c:	e043      	b.n	8003716 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d119      	bne.n	80036c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6898      	ldr	r0, [r3, #8]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	461a      	mov	r2, r3
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	f001 ff70 	bl	8005584 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	441a      	add	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d32b      	bcc.n	8003716 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	e026      	b.n	8003716 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	68d8      	ldr	r0, [r3, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	461a      	mov	r2, r3
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	f001 ff56 	bl	8005584 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	425b      	negs	r3, r3
 80036e2:	441a      	add	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d207      	bcs.n	8003704 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	425b      	negs	r3, r3
 80036fe:	441a      	add	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d105      	bne.n	8003716 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3b01      	subs	r3, #1
 8003714:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800371e:	697b      	ldr	r3, [r7, #20]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d018      	beq.n	800376c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	441a      	add	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d303      	bcc.n	800375c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68d9      	ldr	r1, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	461a      	mov	r2, r3
 8003766:	6838      	ldr	r0, [r7, #0]
 8003768:	f001 ff0c 	bl	8005584 <memcpy>
	}
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800377c:	f001 fbee 	bl	8004f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003786:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003788:	e011      	b.n	80037ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d012      	beq.n	80037b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3324      	adds	r3, #36	; 0x24
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fd16 	bl	80041c8 <xTaskRemoveFromEventList>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037a2:	f000 fde9 	bl	8004378 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	dce9      	bgt.n	800378a <prvUnlockQueue+0x16>
 80037b6:	e000      	b.n	80037ba <prvUnlockQueue+0x46>
					break;
 80037b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	22ff      	movs	r2, #255	; 0xff
 80037be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037c2:	f001 fbf9 	bl	8004fb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037c6:	f001 fbc9 	bl	8004f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037d2:	e011      	b.n	80037f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d012      	beq.n	8003802 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3310      	adds	r3, #16
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fcf1 	bl	80041c8 <xTaskRemoveFromEventList>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037ec:	f000 fdc4 	bl	8004378 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037f0:	7bbb      	ldrb	r3, [r7, #14]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	dce9      	bgt.n	80037d4 <prvUnlockQueue+0x60>
 8003800:	e000      	b.n	8003804 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003802:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	22ff      	movs	r2, #255	; 0xff
 8003808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800380c:	f001 fbd4 	bl	8004fb8 <vPortExitCritical>
}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003820:	f001 fb9c 	bl	8004f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800382c:	2301      	movs	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e001      	b.n	8003836 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003836:	f001 fbbf 	bl	8004fb8 <vPortExitCritical>

	return xReturn;
 800383a:	68fb      	ldr	r3, [r7, #12]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800384c:	f001 fb86 	bl	8004f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	429a      	cmp	r2, r3
 800385a:	d102      	bne.n	8003862 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800385c:	2301      	movs	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e001      	b.n	8003866 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003866:	f001 fba7 	bl	8004fb8 <vPortExitCritical>

	return xReturn;
 800386a:	68fb      	ldr	r3, [r7, #12]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e014      	b.n	80038ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003884:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <vQueueAddToRegistry+0x4c>)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10b      	bne.n	80038a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003890:	490b      	ldr	r1, [pc, #44]	; (80038c0 <vQueueAddToRegistry+0x4c>)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800389a:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <vQueueAddToRegistry+0x4c>)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038a6:	e005      	b.n	80038b4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3301      	adds	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b07      	cmp	r3, #7
 80038b2:	d9e7      	bls.n	8003884 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	20001a18 	.word	0x20001a18

080038c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038d4:	f001 fb42 	bl	8004f5c <vPortEnterCritical>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038de:	b25b      	sxtb	r3, r3
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d103      	bne.n	80038ee <vQueueWaitForMessageRestricted+0x2a>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d103      	bne.n	8003904 <vQueueWaitForMessageRestricted+0x40>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003904:	f001 fb58 	bl	8004fb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	3324      	adds	r3, #36	; 0x24
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fc2b 	bl	8004174 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f7ff ff28 	bl	8003774 <prvUnlockQueue>
	}
 8003924:	bf00      	nop
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08e      	sub	sp, #56	; 0x38
 8003930:	af04      	add	r7, sp, #16
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800393a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <xTaskCreateStatic+0x28>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	e7fe      	b.n	8003952 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <xTaskCreateStatic+0x42>
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	e7fe      	b.n	800396c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800396e:	235c      	movs	r3, #92	; 0x5c
 8003970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b5c      	cmp	r3, #92	; 0x5c
 8003976:	d009      	beq.n	800398c <xTaskCreateStatic+0x60>
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	e7fe      	b.n	800398a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01e      	beq.n	80039d0 <xTaskCreateStatic+0xa4>
 8003992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01b      	beq.n	80039d0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039aa:	2300      	movs	r3, #0
 80039ac:	9303      	str	r3, [sp, #12]
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	9302      	str	r3, [sp, #8]
 80039b2:	f107 0314 	add.w	r3, r7, #20
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f850 	bl	8003a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039ca:	f000 f8d3 	bl	8003b74 <prvAddNewTaskToReadyList>
 80039ce:	e001      	b.n	80039d4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039d4:	697b      	ldr	r3, [r7, #20]
	}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3728      	adds	r7, #40	; 0x28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b08c      	sub	sp, #48	; 0x30
 80039e2:	af04      	add	r7, sp, #16
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 fbcc 	bl	8005190 <pvPortMalloc>
 80039f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00e      	beq.n	8003a1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a00:	205c      	movs	r0, #92	; 0x5c
 8003a02:	f001 fbc5 	bl	8005190 <pvPortMalloc>
 8003a06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
 8003a14:	e005      	b.n	8003a22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a16:	6978      	ldr	r0, [r7, #20]
 8003a18:	f001 fc7c 	bl	8005314 <vPortFree>
 8003a1c:	e001      	b.n	8003a22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d017      	beq.n	8003a58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	2300      	movs	r3, #0
 8003a34:	9303      	str	r3, [sp, #12]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	9302      	str	r3, [sp, #8]
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f80e 	bl	8003a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a4c:	69f8      	ldr	r0, [r7, #28]
 8003a4e:	f000 f891 	bl	8003b74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e002      	b.n	8003a5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	461a      	mov	r2, r3
 8003a80:	21a5      	movs	r1, #165	; 0xa5
 8003a82:	f001 fd8a 	bl	800559a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a90:	3b01      	subs	r3, #1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f023 0307 	bic.w	r3, r3, #7
 8003a9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <prvInitialiseNewTask+0x56>
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e7fe      	b.n	8003abc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	e012      	b.n	8003aea <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	7819      	ldrb	r1, [r3, #0]
 8003acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3334      	adds	r3, #52	; 0x34
 8003ad4:	460a      	mov	r2, r1
 8003ad6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	4413      	add	r3, r2
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d006      	beq.n	8003af2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2b0f      	cmp	r3, #15
 8003aee:	d9e9      	bls.n	8003ac4 <prvInitialiseNewTask+0x5c>
 8003af0:	e000      	b.n	8003af4 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003af2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	2b37      	cmp	r3, #55	; 0x37
 8003b00:	d901      	bls.n	8003b06 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b02:	2337      	movs	r3, #55	; 0x37
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	2200      	movs	r2, #0
 8003b16:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff f99d 	bl	8002e5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	3318      	adds	r3, #24
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff f998 	bl	8002e5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	2200      	movs	r2, #0
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	69b8      	ldr	r0, [r7, #24]
 8003b56:	f001 f8db 	bl	8004d10 <pxPortInitialiseStack>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b6c:	bf00      	nop
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b7c:	f001 f9ee 	bl	8004f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <prvAddNewTaskToReadyList+0xc4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <prvAddNewTaskToReadyList+0xc4>)
 8003b88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b8a:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b92:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b98:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <prvAddNewTaskToReadyList+0xc4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d110      	bne.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ba0:	f000 fc0e 	bl	80043c0 <prvInitialiseTaskLists>
 8003ba4:	e00d      	b.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ba6:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <prvAddNewTaskToReadyList+0xcc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bae:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d802      	bhi.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bbc:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <prvAddNewTaskToReadyList+0xd0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <prvAddNewTaskToReadyList+0xd0>)
 8003bca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <prvAddNewTaskToReadyList+0xd0>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <prvAddNewTaskToReadyList+0xd4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d903      	bls.n	8003be8 <prvAddNewTaskToReadyList+0x74>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <prvAddNewTaskToReadyList+0xd4>)
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <prvAddNewTaskToReadyList+0xd8>)
 8003bf6:	441a      	add	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f7ff f939 	bl	8002e76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c04:	f001 f9d8 	bl	8004fb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c08:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <prvAddNewTaskToReadyList+0xcc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d207      	bcs.n	8003c2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <prvAddNewTaskToReadyList+0xdc>)
 8003c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000bc4 	.word	0x20000bc4
 8003c3c:	200006f0 	.word	0x200006f0
 8003c40:	20000bd0 	.word	0x20000bd0
 8003c44:	20000be0 	.word	0x20000be0
 8003c48:	20000bcc 	.word	0x20000bcc
 8003c4c:	200006f4 	.word	0x200006f4
 8003c50:	e000ed04 	.word	0xe000ed04

08003c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d016      	beq.n	8003c94 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <vTaskDelay+0x60>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d009      	beq.n	8003c82 <vTaskDelay+0x2e>
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	e7fe      	b.n	8003c80 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c82:	f000 f87f 	bl	8003d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c86:	2100      	movs	r1, #0
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fce3 	bl	8004654 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c8e:	f000 f887 	bl	8003da0 <xTaskResumeAll>
 8003c92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <vTaskDelay+0x64>)
 8003c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000bec 	.word	0x20000bec
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cca:	463a      	mov	r2, r7
 8003ccc:	1d39      	adds	r1, r7, #4
 8003cce:	f107 0308 	add.w	r3, r7, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff f86e 	bl	8002db4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	9202      	str	r2, [sp, #8]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	460a      	mov	r2, r1
 8003cea:	4920      	ldr	r1, [pc, #128]	; (8003d6c <vTaskStartScheduler+0xb0>)
 8003cec:	4820      	ldr	r0, [pc, #128]	; (8003d70 <vTaskStartScheduler+0xb4>)
 8003cee:	f7ff fe1d 	bl	800392c <xTaskCreateStatic>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <vTaskStartScheduler+0xb8>)
 8003cf6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <vTaskStartScheduler+0xb8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d00:	2301      	movs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e001      	b.n	8003d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d102      	bne.n	8003d16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d10:	f000 fcf4 	bl	80046fc <xTimerCreateTimerTask>
 8003d14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d115      	bne.n	8003d48 <vTaskStartScheduler+0x8c>
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <vTaskStartScheduler+0xbc>)
 8003d30:	f04f 32ff 	mov.w	r2, #4294967295
 8003d34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d36:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <vTaskStartScheduler+0xc0>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <vTaskStartScheduler+0xc4>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d42:	f001 f86d 	bl	8004e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d46:	e00d      	b.n	8003d64 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d109      	bne.n	8003d64 <vTaskStartScheduler+0xa8>
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e7fe      	b.n	8003d62 <vTaskStartScheduler+0xa6>
}
 8003d64:	bf00      	nop
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	080055e4 	.word	0x080055e4
 8003d70:	08004391 	.word	0x08004391
 8003d74:	20000be8 	.word	0x20000be8
 8003d78:	20000be4 	.word	0x20000be4
 8003d7c:	20000bd0 	.word	0x20000bd0
 8003d80:	20000bc8 	.word	0x20000bc8

08003d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <vTaskSuspendAll+0x18>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	4a03      	ldr	r2, [pc, #12]	; (8003d9c <vTaskSuspendAll+0x18>)
 8003d90:	6013      	str	r3, [r2, #0]
}
 8003d92:	bf00      	nop
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	20000bec 	.word	0x20000bec

08003da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dae:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <xTaskResumeAll+0x114>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <xTaskResumeAll+0x2a>
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	e7fe      	b.n	8003dc8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dca:	f001 f8c7 	bl	8004f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dce:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <xTaskResumeAll+0x114>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	4a37      	ldr	r2, [pc, #220]	; (8003eb4 <xTaskResumeAll+0x114>)
 8003dd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dd8:	4b36      	ldr	r3, [pc, #216]	; (8003eb4 <xTaskResumeAll+0x114>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d162      	bne.n	8003ea6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003de0:	4b35      	ldr	r3, [pc, #212]	; (8003eb8 <xTaskResumeAll+0x118>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d05e      	beq.n	8003ea6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003de8:	e02f      	b.n	8003e4a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003dea:	4b34      	ldr	r3, [pc, #208]	; (8003ebc <xTaskResumeAll+0x11c>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3318      	adds	r3, #24
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff f89a 	bl	8002f30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff f895 	bl	8002f30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	4b2d      	ldr	r3, [pc, #180]	; (8003ec0 <xTaskResumeAll+0x120>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d903      	bls.n	8003e1a <xTaskResumeAll+0x7a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <xTaskResumeAll+0x120>)
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <xTaskResumeAll+0x124>)
 8003e28:	441a      	add	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f7ff f820 	bl	8002e76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3a:	4b23      	ldr	r3, [pc, #140]	; (8003ec8 <xTaskResumeAll+0x128>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d302      	bcc.n	8003e4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e44:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <xTaskResumeAll+0x12c>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e4a:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <xTaskResumeAll+0x11c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1cb      	bne.n	8003dea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e58:	f000 fb4c 	bl	80044f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e5c:	4b1c      	ldr	r3, [pc, #112]	; (8003ed0 <xTaskResumeAll+0x130>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d010      	beq.n	8003e8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e68:	f000 f846 	bl	8003ef8 <xTaskIncrementTick>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e72:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <xTaskResumeAll+0x12c>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f1      	bne.n	8003e68 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <xTaskResumeAll+0x130>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <xTaskResumeAll+0x12c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e96:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <xTaskResumeAll+0x134>)
 8003e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ea6:	f001 f887 	bl	8004fb8 <vPortExitCritical>

	return xAlreadyYielded;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000bec 	.word	0x20000bec
 8003eb8:	20000bc4 	.word	0x20000bc4
 8003ebc:	20000b84 	.word	0x20000b84
 8003ec0:	20000bcc 	.word	0x20000bcc
 8003ec4:	200006f4 	.word	0x200006f4
 8003ec8:	200006f0 	.word	0x200006f0
 8003ecc:	20000bd8 	.word	0x20000bd8
 8003ed0:	20000bd4 	.word	0x20000bd4
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <xTaskGetTickCount+0x1c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ee4:	687b      	ldr	r3, [r7, #4]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000bc8 	.word	0x20000bc8

08003ef8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f02:	4b51      	ldr	r3, [pc, #324]	; (8004048 <xTaskIncrementTick+0x150>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 808d 	bne.w	8004026 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f0c:	4b4f      	ldr	r3, [pc, #316]	; (800404c <xTaskIncrementTick+0x154>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3301      	adds	r3, #1
 8003f12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f14:	4a4d      	ldr	r2, [pc, #308]	; (800404c <xTaskIncrementTick+0x154>)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d11f      	bne.n	8003f60 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f20:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <xTaskIncrementTick+0x158>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <xTaskIncrementTick+0x46>
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	e7fe      	b.n	8003f3c <xTaskIncrementTick+0x44>
 8003f3e:	4b44      	ldr	r3, [pc, #272]	; (8004050 <xTaskIncrementTick+0x158>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	4b43      	ldr	r3, [pc, #268]	; (8004054 <xTaskIncrementTick+0x15c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a41      	ldr	r2, [pc, #260]	; (8004050 <xTaskIncrementTick+0x158>)
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	4a41      	ldr	r2, [pc, #260]	; (8004054 <xTaskIncrementTick+0x15c>)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b41      	ldr	r3, [pc, #260]	; (8004058 <xTaskIncrementTick+0x160>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3301      	adds	r3, #1
 8003f58:	4a3f      	ldr	r2, [pc, #252]	; (8004058 <xTaskIncrementTick+0x160>)
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	f000 faca 	bl	80044f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f60:	4b3e      	ldr	r3, [pc, #248]	; (800405c <xTaskIncrementTick+0x164>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d34e      	bcc.n	8004008 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6a:	4b39      	ldr	r3, [pc, #228]	; (8004050 <xTaskIncrementTick+0x158>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <xTaskIncrementTick+0x80>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <xTaskIncrementTick+0x82>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d004      	beq.n	8003f88 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <xTaskIncrementTick+0x164>)
 8003f80:	f04f 32ff 	mov.w	r2, #4294967295
 8003f84:	601a      	str	r2, [r3, #0]
					break;
 8003f86:	e03f      	b.n	8004008 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f88:	4b31      	ldr	r3, [pc, #196]	; (8004050 <xTaskIncrementTick+0x158>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d203      	bcs.n	8003fa8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fa0:	4a2e      	ldr	r2, [pc, #184]	; (800405c <xTaskIncrementTick+0x164>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6013      	str	r3, [r2, #0]
						break;
 8003fa6:	e02f      	b.n	8004008 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fe ffbf 	bl	8002f30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	3318      	adds	r3, #24
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe ffb6 	bl	8002f30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <xTaskIncrementTick+0x168>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d903      	bls.n	8003fd8 <xTaskIncrementTick+0xe0>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4a22      	ldr	r2, [pc, #136]	; (8004060 <xTaskIncrementTick+0x168>)
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4a1f      	ldr	r2, [pc, #124]	; (8004064 <xTaskIncrementTick+0x16c>)
 8003fe6:	441a      	add	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f7fe ff41 	bl	8002e76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <xTaskIncrementTick+0x170>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d3b3      	bcc.n	8003f6a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004002:	2301      	movs	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004006:	e7b0      	b.n	8003f6a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004008:	4b17      	ldr	r3, [pc, #92]	; (8004068 <xTaskIncrementTick+0x170>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400e:	4915      	ldr	r1, [pc, #84]	; (8004064 <xTaskIncrementTick+0x16c>)
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d907      	bls.n	8004030 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004020:	2301      	movs	r3, #1
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e004      	b.n	8004030 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <xTaskIncrementTick+0x174>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3301      	adds	r3, #1
 800402c:	4a0f      	ldr	r2, [pc, #60]	; (800406c <xTaskIncrementTick+0x174>)
 800402e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <xTaskIncrementTick+0x178>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004038:	2301      	movs	r3, #1
 800403a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800403c:	697b      	ldr	r3, [r7, #20]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000bec 	.word	0x20000bec
 800404c:	20000bc8 	.word	0x20000bc8
 8004050:	20000b7c 	.word	0x20000b7c
 8004054:	20000b80 	.word	0x20000b80
 8004058:	20000bdc 	.word	0x20000bdc
 800405c:	20000be4 	.word	0x20000be4
 8004060:	20000bcc 	.word	0x20000bcc
 8004064:	200006f4 	.word	0x200006f4
 8004068:	200006f0 	.word	0x200006f0
 800406c:	20000bd4 	.word	0x20000bd4
 8004070:	20000bd8 	.word	0x20000bd8

08004074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800407a:	4b27      	ldr	r3, [pc, #156]	; (8004118 <vTaskSwitchContext+0xa4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004082:	4b26      	ldr	r3, [pc, #152]	; (800411c <vTaskSwitchContext+0xa8>)
 8004084:	2201      	movs	r2, #1
 8004086:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004088:	e040      	b.n	800410c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <vTaskSwitchContext+0xa8>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004090:	4b23      	ldr	r3, [pc, #140]	; (8004120 <vTaskSwitchContext+0xac>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e00f      	b.n	80040b8 <vTaskSwitchContext+0x44>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <vTaskSwitchContext+0x3e>
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	e7fe      	b.n	80040b0 <vTaskSwitchContext+0x3c>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	491a      	ldr	r1, [pc, #104]	; (8004124 <vTaskSwitchContext+0xb0>)
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0e5      	beq.n	8004098 <vTaskSwitchContext+0x24>
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4a13      	ldr	r2, [pc, #76]	; (8004124 <vTaskSwitchContext+0xb0>)
 80040d8:	4413      	add	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3308      	adds	r3, #8
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d104      	bne.n	80040fc <vTaskSwitchContext+0x88>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	605a      	str	r2, [r3, #4]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	4a09      	ldr	r2, [pc, #36]	; (8004128 <vTaskSwitchContext+0xb4>)
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4a06      	ldr	r2, [pc, #24]	; (8004120 <vTaskSwitchContext+0xac>)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6013      	str	r3, [r2, #0]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	20000bec 	.word	0x20000bec
 800411c:	20000bd8 	.word	0x20000bd8
 8004120:	20000bcc 	.word	0x20000bcc
 8004124:	200006f4 	.word	0x200006f4
 8004128:	200006f0 	.word	0x200006f0

0800412c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <vTaskPlaceOnEventList+0x24>
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	e7fe      	b.n	800414e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <vTaskPlaceOnEventList+0x44>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3318      	adds	r3, #24
 8004156:	4619      	mov	r1, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fe feb0 	bl	8002ebe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800415e:	2101      	movs	r1, #1
 8004160:	6838      	ldr	r0, [r7, #0]
 8004162:	f000 fa77 	bl	8004654 <prvAddCurrentTaskToDelayedList>
}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200006f0 	.word	0x200006f0

08004174 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <vTaskPlaceOnEventListRestricted+0x26>
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	e7fe      	b.n	8004198 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800419a:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <vTaskPlaceOnEventListRestricted+0x50>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3318      	adds	r3, #24
 80041a0:	4619      	mov	r1, r3
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7fe fe67 	bl	8002e76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80041ae:	f04f 33ff 	mov.w	r3, #4294967295
 80041b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	68b8      	ldr	r0, [r7, #8]
 80041b8:	f000 fa4c 	bl	8004654 <prvAddCurrentTaskToDelayedList>
	}
 80041bc:	bf00      	nop
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	200006f0 	.word	0x200006f0

080041c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <xTaskRemoveFromEventList+0x2a>
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	e7fe      	b.n	80041f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3318      	adds	r3, #24
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fe9a 	bl	8002f30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <xTaskRemoveFromEventList+0xac>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d11d      	bne.n	8004240 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	3304      	adds	r3, #4
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe fe91 	bl	8002f30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	4b19      	ldr	r3, [pc, #100]	; (8004278 <xTaskRemoveFromEventList+0xb0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d903      	bls.n	8004222 <xTaskRemoveFromEventList+0x5a>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	4a16      	ldr	r2, [pc, #88]	; (8004278 <xTaskRemoveFromEventList+0xb0>)
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4a13      	ldr	r2, [pc, #76]	; (800427c <xTaskRemoveFromEventList+0xb4>)
 8004230:	441a      	add	r2, r3
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3304      	adds	r3, #4
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f7fe fe1c 	bl	8002e76 <vListInsertEnd>
 800423e:	e005      	b.n	800424c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	3318      	adds	r3, #24
 8004244:	4619      	mov	r1, r3
 8004246:	480e      	ldr	r0, [pc, #56]	; (8004280 <xTaskRemoveFromEventList+0xb8>)
 8004248:	f7fe fe15 	bl	8002e76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <xTaskRemoveFromEventList+0xbc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	429a      	cmp	r2, r3
 8004258:	d905      	bls.n	8004266 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800425a:	2301      	movs	r3, #1
 800425c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <xTaskRemoveFromEventList+0xc0>)
 8004260:	2201      	movs	r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e001      	b.n	800426a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800426a:	697b      	ldr	r3, [r7, #20]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000bec 	.word	0x20000bec
 8004278:	20000bcc 	.word	0x20000bcc
 800427c:	200006f4 	.word	0x200006f4
 8004280:	20000b84 	.word	0x20000b84
 8004284:	200006f0 	.word	0x200006f0
 8004288:	20000bd8 	.word	0x20000bd8

0800428c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <vTaskInternalSetTimeOutState+0x24>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <vTaskInternalSetTimeOutState+0x28>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	605a      	str	r2, [r3, #4]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	20000bdc 	.word	0x20000bdc
 80042b4:	20000bc8 	.word	0x20000bc8

080042b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d109      	bne.n	80042dc <xTaskCheckForTimeOut+0x24>
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e7fe      	b.n	80042da <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <xTaskCheckForTimeOut+0x3e>
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e7fe      	b.n	80042f4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80042f6:	f000 fe31 	bl	8004f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042fa:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <xTaskCheckForTimeOut+0xb8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d102      	bne.n	800431a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004314:	2300      	movs	r3, #0
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	e023      	b.n	8004362 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <xTaskCheckForTimeOut+0xbc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d007      	beq.n	8004336 <xTaskCheckForTimeOut+0x7e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	429a      	cmp	r2, r3
 800432e:	d302      	bcc.n	8004336 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004330:	2301      	movs	r3, #1
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	e015      	b.n	8004362 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	429a      	cmp	r2, r3
 800433e:	d20b      	bcs.n	8004358 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	1ad2      	subs	r2, r2, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ff9d 	bl	800428c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e004      	b.n	8004362 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800435e:	2301      	movs	r3, #1
 8004360:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004362:	f000 fe29 	bl	8004fb8 <vPortExitCritical>

	return xReturn;
 8004366:	69fb      	ldr	r3, [r7, #28]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3720      	adds	r7, #32
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000bc8 	.word	0x20000bc8
 8004374:	20000bdc 	.word	0x20000bdc

08004378 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <vTaskMissedYield+0x14>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	20000bd8 	.word	0x20000bd8

08004390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004398:	f000 f852 	bl	8004440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <prvIdleTask+0x28>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d9f9      	bls.n	8004398 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <prvIdleTask+0x2c>)
 80043a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043b4:	e7f0      	b.n	8004398 <prvIdleTask+0x8>
 80043b6:	bf00      	nop
 80043b8:	200006f4 	.word	0x200006f4
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	e00c      	b.n	80043e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4a12      	ldr	r2, [pc, #72]	; (8004420 <prvInitialiseTaskLists+0x60>)
 80043d8:	4413      	add	r3, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fd1e 	bl	8002e1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3301      	adds	r3, #1
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b37      	cmp	r3, #55	; 0x37
 80043ea:	d9ef      	bls.n	80043cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043ec:	480d      	ldr	r0, [pc, #52]	; (8004424 <prvInitialiseTaskLists+0x64>)
 80043ee:	f7fe fd15 	bl	8002e1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043f2:	480d      	ldr	r0, [pc, #52]	; (8004428 <prvInitialiseTaskLists+0x68>)
 80043f4:	f7fe fd12 	bl	8002e1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043f8:	480c      	ldr	r0, [pc, #48]	; (800442c <prvInitialiseTaskLists+0x6c>)
 80043fa:	f7fe fd0f 	bl	8002e1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043fe:	480c      	ldr	r0, [pc, #48]	; (8004430 <prvInitialiseTaskLists+0x70>)
 8004400:	f7fe fd0c 	bl	8002e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004404:	480b      	ldr	r0, [pc, #44]	; (8004434 <prvInitialiseTaskLists+0x74>)
 8004406:	f7fe fd09 	bl	8002e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <prvInitialiseTaskLists+0x78>)
 800440c:	4a05      	ldr	r2, [pc, #20]	; (8004424 <prvInitialiseTaskLists+0x64>)
 800440e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <prvInitialiseTaskLists+0x7c>)
 8004412:	4a05      	ldr	r2, [pc, #20]	; (8004428 <prvInitialiseTaskLists+0x68>)
 8004414:	601a      	str	r2, [r3, #0]
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	200006f4 	.word	0x200006f4
 8004424:	20000b54 	.word	0x20000b54
 8004428:	20000b68 	.word	0x20000b68
 800442c:	20000b84 	.word	0x20000b84
 8004430:	20000b98 	.word	0x20000b98
 8004434:	20000bb0 	.word	0x20000bb0
 8004438:	20000b7c 	.word	0x20000b7c
 800443c:	20000b80 	.word	0x20000b80

08004440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004446:	e019      	b.n	800447c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004448:	f000 fd88 	bl	8004f5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <prvCheckTasksWaitingTermination+0x4c>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe fd69 	bl	8002f30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <prvCheckTasksWaitingTermination+0x50>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3b01      	subs	r3, #1
 8004464:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <prvCheckTasksWaitingTermination+0x50>)
 8004466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <prvCheckTasksWaitingTermination+0x54>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3b01      	subs	r3, #1
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <prvCheckTasksWaitingTermination+0x54>)
 8004470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004472:	f000 fda1 	bl	8004fb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f80e 	bl	8004498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <prvCheckTasksWaitingTermination+0x54>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e1      	bne.n	8004448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000b98 	.word	0x20000b98
 8004490:	20000bc4 	.word	0x20000bc4
 8004494:	20000bac 	.word	0x20000bac

08004498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 ff30 	bl	8005314 <vPortFree>
				vPortFree( pxTCB );
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 ff2d 	bl	8005314 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044ba:	e017      	b.n	80044ec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d103      	bne.n	80044ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 ff24 	bl	8005314 <vPortFree>
	}
 80044cc:	e00e      	b.n	80044ec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d009      	beq.n	80044ec <prvDeleteTCB+0x54>
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e7fe      	b.n	80044ea <prvDeleteTCB+0x52>
	}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044fa:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <prvResetNextTaskUnblockTime+0x44>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <prvResetNextTaskUnblockTime+0x14>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <prvResetNextTaskUnblockTime+0x16>
 8004508:	2300      	movs	r3, #0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d004      	beq.n	8004518 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <prvResetNextTaskUnblockTime+0x48>)
 8004510:	f04f 32ff 	mov.w	r2, #4294967295
 8004514:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004516:	e008      	b.n	800452a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004518:	4b07      	ldr	r3, [pc, #28]	; (8004538 <prvResetNextTaskUnblockTime+0x44>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4a05      	ldr	r2, [pc, #20]	; (800453c <prvResetNextTaskUnblockTime+0x48>)
 8004528:	6013      	str	r3, [r2, #0]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000b7c 	.word	0x20000b7c
 800453c:	20000be4 	.word	0x20000be4

08004540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <xTaskGetSchedulerState+0x34>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d102      	bne.n	8004554 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800454e:	2301      	movs	r3, #1
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	e008      	b.n	8004566 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004554:	4b08      	ldr	r3, [pc, #32]	; (8004578 <xTaskGetSchedulerState+0x38>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800455c:	2302      	movs	r3, #2
 800455e:	607b      	str	r3, [r7, #4]
 8004560:	e001      	b.n	8004566 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004562:	2300      	movs	r3, #0
 8004564:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004566:	687b      	ldr	r3, [r7, #4]
	}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	20000bd0 	.word	0x20000bd0
 8004578:	20000bec 	.word	0x20000bec

0800457c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d054      	beq.n	800463c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004592:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <xTaskPriorityDisinherit+0xcc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	429a      	cmp	r2, r3
 800459a:	d009      	beq.n	80045b0 <xTaskPriorityDisinherit+0x34>
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	e7fe      	b.n	80045ae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <xTaskPriorityDisinherit+0x50>
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	e7fe      	b.n	80045ca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d0:	1e5a      	subs	r2, r3, #1
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045de:	429a      	cmp	r2, r3
 80045e0:	d02c      	beq.n	800463c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d128      	bne.n	800463c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fc9e 	bl	8002f30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <xTaskPriorityDisinherit+0xd0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d903      	bls.n	800461c <xTaskPriorityDisinherit+0xa0>
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	4a0c      	ldr	r2, [pc, #48]	; (800464c <xTaskPriorityDisinherit+0xd0>)
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4a09      	ldr	r2, [pc, #36]	; (8004650 <xTaskPriorityDisinherit+0xd4>)
 800462a:	441a      	add	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f7fe fc1f 	bl	8002e76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004638:	2301      	movs	r3, #1
 800463a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800463c:	697b      	ldr	r3, [r7, #20]
	}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	200006f0 	.word	0x200006f0
 800464c:	20000bcc 	.word	0x20000bcc
 8004650:	200006f4 	.word	0x200006f4

08004654 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800465e:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004664:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3304      	adds	r3, #4
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fc60 	bl	8002f30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d10a      	bne.n	800468e <prvAddCurrentTaskToDelayedList+0x3a>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800467e:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4819      	ldr	r0, [pc, #100]	; (80046ec <prvAddCurrentTaskToDelayedList+0x98>)
 8004688:	f7fe fbf5 	bl	8002e76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800468c:	e026      	b.n	80046dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d209      	bcs.n	80046ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f7fe fc03 	bl	8002ebe <vListInsert>
}
 80046b8:	e010      	b.n	80046dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ba:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f7fe fbf9 	bl	8002ebe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d202      	bcs.n	80046dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80046d6:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	6013      	str	r3, [r2, #0]
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000bc8 	.word	0x20000bc8
 80046e8:	200006f0 	.word	0x200006f0
 80046ec:	20000bb0 	.word	0x20000bb0
 80046f0:	20000b80 	.word	0x20000b80
 80046f4:	20000b7c 	.word	0x20000b7c
 80046f8:	20000be4 	.word	0x20000be4

080046fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	; 0x28
 8004700:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004706:	f000 fac3 	bl	8004c90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800470a:	4b1c      	ldr	r3, [pc, #112]	; (800477c <xTimerCreateTimerTask+0x80>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d021      	beq.n	8004756 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800471a:	1d3a      	adds	r2, r7, #4
 800471c:	f107 0108 	add.w	r1, r7, #8
 8004720:	f107 030c 	add.w	r3, r7, #12
 8004724:	4618      	mov	r0, r3
 8004726:	f7fe fb5f 	bl	8002de8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	9202      	str	r2, [sp, #8]
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	2302      	movs	r3, #2
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	2300      	movs	r3, #0
 800473a:	460a      	mov	r2, r1
 800473c:	4910      	ldr	r1, [pc, #64]	; (8004780 <xTimerCreateTimerTask+0x84>)
 800473e:	4811      	ldr	r0, [pc, #68]	; (8004784 <xTimerCreateTimerTask+0x88>)
 8004740:	f7ff f8f4 	bl	800392c <xTaskCreateStatic>
 8004744:	4602      	mov	r2, r0
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <xTimerCreateTimerTask+0x8c>)
 8004748:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <xTimerCreateTimerTask+0x8c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004752:	2301      	movs	r3, #1
 8004754:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <xTimerCreateTimerTask+0x74>
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	e7fe      	b.n	800476e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004770:	697b      	ldr	r3, [r7, #20]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000c20 	.word	0x20000c20
 8004780:	080055ec 	.word	0x080055ec
 8004784:	080048a5 	.word	0x080048a5
 8004788:	20000c24 	.word	0x20000c24

0800478c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800479a:	2300      	movs	r3, #0
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <xTimerGenericCommand+0x2c>
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	623b      	str	r3, [r7, #32]
 80047b6:	e7fe      	b.n	80047b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047b8:	4b19      	ldr	r3, [pc, #100]	; (8004820 <xTimerGenericCommand+0x94>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02a      	beq.n	8004816 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	dc18      	bgt.n	8004804 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047d2:	f7ff feb5 	bl	8004540 <xTaskGetSchedulerState>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d109      	bne.n	80047f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <xTimerGenericCommand+0x94>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	f107 0110 	add.w	r1, r7, #16
 80047e4:	2300      	movs	r3, #0
 80047e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e8:	f7fe fcca 	bl	8003180 <xQueueGenericSend>
 80047ec:	6278      	str	r0, [r7, #36]	; 0x24
 80047ee:	e012      	b.n	8004816 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <xTimerGenericCommand+0x94>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	f107 0110 	add.w	r1, r7, #16
 80047f8:	2300      	movs	r3, #0
 80047fa:	2200      	movs	r2, #0
 80047fc:	f7fe fcc0 	bl	8003180 <xQueueGenericSend>
 8004800:	6278      	str	r0, [r7, #36]	; 0x24
 8004802:	e008      	b.n	8004816 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <xTimerGenericCommand+0x94>)
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	f107 0110 	add.w	r1, r7, #16
 800480c:	2300      	movs	r3, #0
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	f7fe fdb0 	bl	8003374 <xQueueGenericSendFromISR>
 8004814:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004818:	4618      	mov	r0, r3
 800481a:	3728      	adds	r7, #40	; 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000c20 	.word	0x20000c20

08004824 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af02      	add	r7, sp, #8
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800482e:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <prvProcessExpiredTimer+0x7c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	3304      	adds	r3, #4
 800483c:	4618      	mov	r0, r3
 800483e:	f7fe fb77 	bl	8002f30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d121      	bne.n	800488e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	18d1      	adds	r1, r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	6978      	ldr	r0, [r7, #20]
 8004858:	f000 f8c8 	bl	80049ec <prvInsertTimerInActiveList>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d015      	beq.n	800488e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004862:	2300      	movs	r3, #0
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	2100      	movs	r1, #0
 800486c:	6978      	ldr	r0, [r7, #20]
 800486e:	f7ff ff8d 	bl	800478c <xTimerGenericCommand>
 8004872:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <prvProcessExpiredTimer+0x6a>
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e7fe      	b.n	800488c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	6978      	ldr	r0, [r7, #20]
 8004894:	4798      	blx	r3
}
 8004896:	bf00      	nop
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000c18 	.word	0x20000c18

080048a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048ac:	f107 0308 	add.w	r3, r7, #8
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 f857 	bl	8004964 <prvGetNextExpireTime>
 80048b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4619      	mov	r1, r3
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f803 	bl	80048c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80048c2:	f000 f8d5 	bl	8004a70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048c6:	e7f1      	b.n	80048ac <prvTimerTask+0x8>

080048c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80048d2:	f7ff fa57 	bl	8003d84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048d6:	f107 0308 	add.w	r3, r7, #8
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f866 	bl	80049ac <prvSampleTimeNow>
 80048e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d130      	bne.n	800494a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <prvProcessTimerOrBlockTask+0x3c>
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d806      	bhi.n	8004904 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80048f6:	f7ff fa53 	bl	8003da0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048fa:	68f9      	ldr	r1, [r7, #12]
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ff91 	bl	8004824 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004902:	e024      	b.n	800494e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d008      	beq.n	800491c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <prvProcessTimerOrBlockTask+0x90>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf0c      	ite	eq
 8004914:	2301      	moveq	r3, #1
 8004916:	2300      	movne	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800491c:	4b0f      	ldr	r3, [pc, #60]	; (800495c <prvProcessTimerOrBlockTask+0x94>)
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	4619      	mov	r1, r3
 800492a:	f7fe ffcb 	bl	80038c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800492e:	f7ff fa37 	bl	8003da0 <xTaskResumeAll>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <prvProcessTimerOrBlockTask+0x98>)
 800493a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	f3bf 8f6f 	isb	sy
}
 8004948:	e001      	b.n	800494e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800494a:	f7ff fa29 	bl	8003da0 <xTaskResumeAll>
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20000c1c 	.word	0x20000c1c
 800495c:	20000c20 	.word	0x20000c20
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800496c:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <prvGetNextExpireTime+0x44>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf0c      	ite	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	2300      	movne	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <prvGetNextExpireTime+0x44>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e001      	b.n	800499a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800499a:	68fb      	ldr	r3, [r7, #12]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	20000c18 	.word	0x20000c18

080049ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80049b4:	f7ff fa90 	bl	8003ed8 <xTaskGetTickCount>
 80049b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80049ba:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <prvSampleTimeNow+0x3c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d205      	bcs.n	80049d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80049c4:	f000 f904 	bl	8004bd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e002      	b.n	80049d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80049d6:	4a04      	ldr	r2, [pc, #16]	; (80049e8 <prvSampleTimeNow+0x3c>)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80049dc:	68fb      	ldr	r3, [r7, #12]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000c28 	.word	0x20000c28

080049ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d812      	bhi.n	8004a38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	1ad2      	subs	r2, r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d302      	bcc.n	8004a26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e01b      	b.n	8004a5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <prvInsertTimerInActiveList+0x7c>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f7fe fa44 	bl	8002ebe <vListInsert>
 8004a36:	e012      	b.n	8004a5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d206      	bcs.n	8004a4e <prvInsertTimerInActiveList+0x62>
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d302      	bcc.n	8004a4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e007      	b.n	8004a5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a4e:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <prvInsertTimerInActiveList+0x80>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3304      	adds	r3, #4
 8004a56:	4619      	mov	r1, r3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	f7fe fa30 	bl	8002ebe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a5e:	697b      	ldr	r3, [r7, #20]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000c1c 	.word	0x20000c1c
 8004a6c:	20000c18 	.word	0x20000c18

08004a70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08e      	sub	sp, #56	; 0x38
 8004a74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a76:	e099      	b.n	8004bac <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	da17      	bge.n	8004aae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a7e:	1d3b      	adds	r3, r7, #4
 8004a80:	3304      	adds	r3, #4
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <prvProcessReceivedCommands+0x2e>
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	e7fe      	b.n	8004a9c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa4:	6850      	ldr	r0, [r2, #4]
 8004aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa8:	6892      	ldr	r2, [r2, #8]
 8004aaa:	4611      	mov	r1, r2
 8004aac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	db7a      	blt.n	8004baa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe fa33 	bl	8002f30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004aca:	463b      	mov	r3, r7
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff ff6d 	bl	80049ac <prvSampleTimeNow>
 8004ad2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	d868      	bhi.n	8004bac <prvProcessReceivedCommands+0x13c>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <prvProcessReceivedCommands+0x70>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b09 	.word	0x08004b09
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b09 	.word	0x08004b09
 8004aec:	08004bad 	.word	0x08004bad
 8004af0:	08004b63 	.word	0x08004b63
 8004af4:	08004b99 	.word	0x08004b99
 8004af8:	08004b09 	.word	0x08004b09
 8004afc:	08004b09 	.word	0x08004b09
 8004b00:	08004bad 	.word	0x08004bad
 8004b04:	08004b63 	.word	0x08004b63
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	18d1      	adds	r1, r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b16:	f7ff ff69 	bl	80049ec <prvInsertTimerInActiveList>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d045      	beq.n	8004bac <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b26:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d13d      	bne.n	8004bac <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	441a      	add	r2, r3
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2100      	movs	r1, #0
 8004b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b42:	f7ff fe23 	bl	800478c <xTimerGenericCommand>
 8004b46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d12e      	bne.n	8004bac <prvProcessReceivedCommands+0x13c>
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	e7fe      	b.n	8004b60 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <prvProcessReceivedCommands+0x114>
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e7fe      	b.n	8004b82 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	699a      	ldr	r2, [r3, #24]
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	18d1      	adds	r1, r2, r3
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b92:	f7ff ff2b 	bl	80049ec <prvInsertTimerInActiveList>
					break;
 8004b96:	e009      	b.n	8004bac <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba4:	f000 fbb6 	bl	8005314 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ba8:	e000      	b.n	8004bac <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004baa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <prvProcessReceivedCommands+0x15c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	1d39      	adds	r1, r7, #4
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe fc71 	bl	800349c <xQueueReceive>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f47f af5b 	bne.w	8004a78 <prvProcessReceivedCommands+0x8>
	}
}
 8004bc2:	bf00      	nop
 8004bc4:	3730      	adds	r7, #48	; 0x30
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000c20 	.word	0x20000c20

08004bd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bd6:	e044      	b.n	8004c62 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bd8:	4b2b      	ldr	r3, [pc, #172]	; (8004c88 <prvSwitchTimerLists+0xb8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be2:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <prvSwitchTimerLists+0xb8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe f99d 	bl	8002f30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d12d      	bne.n	8004c62 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d90e      	bls.n	8004c36 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c24:	4b18      	ldr	r3, [pc, #96]	; (8004c88 <prvSwitchTimerLists+0xb8>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f7fe f945 	bl	8002ebe <vListInsert>
 8004c34:	e015      	b.n	8004c62 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c36:	2300      	movs	r3, #0
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	2100      	movs	r1, #0
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff fda3 	bl	800478c <xTimerGenericCommand>
 8004c46:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <prvSwitchTimerLists+0x92>
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	e7fe      	b.n	8004c60 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c62:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <prvSwitchTimerLists+0xb8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1b5      	bne.n	8004bd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <prvSwitchTimerLists+0xb8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <prvSwitchTimerLists+0xbc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <prvSwitchTimerLists+0xb8>)
 8004c78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c7a:	4a04      	ldr	r2, [pc, #16]	; (8004c8c <prvSwitchTimerLists+0xbc>)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	6013      	str	r3, [r2, #0]
}
 8004c80:	bf00      	nop
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000c18 	.word	0x20000c18
 8004c8c:	20000c1c 	.word	0x20000c1c

08004c90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c96:	f000 f961 	bl	8004f5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c9a:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <prvCheckForValidListAndQueue+0x60>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d120      	bne.n	8004ce4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ca2:	4814      	ldr	r0, [pc, #80]	; (8004cf4 <prvCheckForValidListAndQueue+0x64>)
 8004ca4:	f7fe f8ba 	bl	8002e1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ca8:	4813      	ldr	r0, [pc, #76]	; (8004cf8 <prvCheckForValidListAndQueue+0x68>)
 8004caa:	f7fe f8b7 	bl	8002e1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <prvCheckForValidListAndQueue+0x6c>)
 8004cb0:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <prvCheckForValidListAndQueue+0x64>)
 8004cb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004cb4:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <prvCheckForValidListAndQueue+0x70>)
 8004cb6:	4a10      	ldr	r2, [pc, #64]	; (8004cf8 <prvCheckForValidListAndQueue+0x68>)
 8004cb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cba:	2300      	movs	r3, #0
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <prvCheckForValidListAndQueue+0x74>)
 8004cc0:	4a11      	ldr	r2, [pc, #68]	; (8004d08 <prvCheckForValidListAndQueue+0x78>)
 8004cc2:	2110      	movs	r1, #16
 8004cc4:	200a      	movs	r0, #10
 8004cc6:	f7fe f9c5 	bl	8003054 <xQueueGenericCreateStatic>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <prvCheckForValidListAndQueue+0x60>)
 8004cce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <prvCheckForValidListAndQueue+0x60>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <prvCheckForValidListAndQueue+0x60>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	490b      	ldr	r1, [pc, #44]	; (8004d0c <prvCheckForValidListAndQueue+0x7c>)
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fdc8 	bl	8003874 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ce4:	f000 f968 	bl	8004fb8 <vPortExitCritical>
}
 8004ce8:	bf00      	nop
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000c20 	.word	0x20000c20
 8004cf4:	20000bf0 	.word	0x20000bf0
 8004cf8:	20000c04 	.word	0x20000c04
 8004cfc:	20000c18 	.word	0x20000c18
 8004d00:	20000c1c 	.word	0x20000c1c
 8004d04:	20000ccc 	.word	0x20000ccc
 8004d08:	20000c2c 	.word	0x20000c2c
 8004d0c:	080055f4 	.word	0x080055f4

08004d10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3b04      	subs	r3, #4
 8004d20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3b04      	subs	r3, #4
 8004d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f023 0201 	bic.w	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3b04      	subs	r3, #4
 8004d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d40:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <pxPortInitialiseStack+0x64>)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3b14      	subs	r3, #20
 8004d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3b04      	subs	r3, #4
 8004d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f06f 0202 	mvn.w	r2, #2
 8004d5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3b20      	subs	r3, #32
 8004d64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d66:	68fb      	ldr	r3, [r7, #12]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	08004d79 	.word	0x08004d79

08004d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d82:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <prvTaskExitError+0x50>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d009      	beq.n	8004da0 <prvTaskExitError+0x28>
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e7fe      	b.n	8004d9e <prvTaskExitError+0x26>
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004db2:	bf00      	nop
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0fc      	beq.n	8004db4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	2000000c 	.word	0x2000000c
 8004dcc:	00000000 	.word	0x00000000

08004dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <pxCurrentTCBConst2>)
 8004dd2:	6819      	ldr	r1, [r3, #0]
 8004dd4:	6808      	ldr	r0, [r1, #0]
 8004dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dda:	f380 8809 	msr	PSP, r0
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8811 	msr	BASEPRI, r0
 8004dea:	4770      	bx	lr
 8004dec:	f3af 8000 	nop.w

08004df0 <pxCurrentTCBConst2>:
 8004df0:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop

08004df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004df8:	4808      	ldr	r0, [pc, #32]	; (8004e1c <prvPortStartFirstTask+0x24>)
 8004dfa:	6800      	ldr	r0, [r0, #0]
 8004dfc:	6800      	ldr	r0, [r0, #0]
 8004dfe:	f380 8808 	msr	MSP, r0
 8004e02:	f04f 0000 	mov.w	r0, #0
 8004e06:	f380 8814 	msr	CONTROL, r0
 8004e0a:	b662      	cpsie	i
 8004e0c:	b661      	cpsie	f
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	df00      	svc	0
 8004e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e1a:	bf00      	nop
 8004e1c:	e000ed08 	.word	0xe000ed08

08004e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e26:	4b44      	ldr	r3, [pc, #272]	; (8004f38 <xPortStartScheduler+0x118>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a44      	ldr	r2, [pc, #272]	; (8004f3c <xPortStartScheduler+0x11c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d109      	bne.n	8004e44 <xPortStartScheduler+0x24>
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	e7fe      	b.n	8004e42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e44:	4b3c      	ldr	r3, [pc, #240]	; (8004f38 <xPortStartScheduler+0x118>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a3d      	ldr	r2, [pc, #244]	; (8004f40 <xPortStartScheduler+0x120>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d109      	bne.n	8004e62 <xPortStartScheduler+0x42>
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e7fe      	b.n	8004e60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e62:	4b38      	ldr	r3, [pc, #224]	; (8004f44 <xPortStartScheduler+0x124>)
 8004e64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	22ff      	movs	r2, #255	; 0xff
 8004e72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	4b30      	ldr	r3, [pc, #192]	; (8004f48 <xPortStartScheduler+0x128>)
 8004e88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e8a:	4b30      	ldr	r3, [pc, #192]	; (8004f4c <xPortStartScheduler+0x12c>)
 8004e8c:	2207      	movs	r2, #7
 8004e8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e90:	e009      	b.n	8004ea6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004e92:	4b2e      	ldr	r3, [pc, #184]	; (8004f4c <xPortStartScheduler+0x12c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	4a2c      	ldr	r2, [pc, #176]	; (8004f4c <xPortStartScheduler+0x12c>)
 8004e9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b80      	cmp	r3, #128	; 0x80
 8004eb0:	d0ef      	beq.n	8004e92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004eb2:	4b26      	ldr	r3, [pc, #152]	; (8004f4c <xPortStartScheduler+0x12c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f1c3 0307 	rsb	r3, r3, #7
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d009      	beq.n	8004ed2 <xPortStartScheduler+0xb2>
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	e7fe      	b.n	8004ed0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ed2:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <xPortStartScheduler+0x12c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <xPortStartScheduler+0x12c>)
 8004eda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <xPortStartScheduler+0x12c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ee4:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <xPortStartScheduler+0x12c>)
 8004ee6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ef0:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <xPortStartScheduler+0x130>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <xPortStartScheduler+0x130>)
 8004ef6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004efa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004efc:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <xPortStartScheduler+0x130>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <xPortStartScheduler+0x130>)
 8004f02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f08:	f000 f8d6 	bl	80050b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <xPortStartScheduler+0x134>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f12:	f000 f8f5 	bl	8005100 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f16:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <xPortStartScheduler+0x138>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <xPortStartScheduler+0x138>)
 8004f1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f22:	f7ff ff69 	bl	8004df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f26:	f7ff f8a5 	bl	8004074 <vTaskSwitchContext>
	prvTaskExitError();
 8004f2a:	f7ff ff25 	bl	8004d78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	e000ed00 	.word	0xe000ed00
 8004f3c:	410fc271 	.word	0x410fc271
 8004f40:	410fc270 	.word	0x410fc270
 8004f44:	e000e400 	.word	0xe000e400
 8004f48:	20000d1c 	.word	0x20000d1c
 8004f4c:	20000d20 	.word	0x20000d20
 8004f50:	e000ed20 	.word	0xe000ed20
 8004f54:	2000000c 	.word	0x2000000c
 8004f58:	e000ef34 	.word	0xe000ef34

08004f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <vPortEnterCritical+0x54>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	4a0d      	ldr	r2, [pc, #52]	; (8004fb0 <vPortEnterCritical+0x54>)
 8004f7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <vPortEnterCritical+0x54>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d10e      	bne.n	8004fa4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <vPortEnterCritical+0x58>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <vPortEnterCritical+0x48>
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	603b      	str	r3, [r7, #0]
 8004fa2:	e7fe      	b.n	8004fa2 <vPortEnterCritical+0x46>
	}
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	2000000c 	.word	0x2000000c
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fbe:	4b11      	ldr	r3, [pc, #68]	; (8005004 <vPortExitCritical+0x4c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <vPortExitCritical+0x22>
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	e7fe      	b.n	8004fd8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <vPortExitCritical+0x4c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	4a08      	ldr	r2, [pc, #32]	; (8005004 <vPortExitCritical+0x4c>)
 8004fe2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fe4:	4b07      	ldr	r3, [pc, #28]	; (8005004 <vPortExitCritical+0x4c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <vPortExitCritical+0x3e>
 8004fec:	2300      	movs	r3, #0
 8004fee:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	2000000c 	.word	0x2000000c
	...

08005010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005010:	f3ef 8009 	mrs	r0, PSP
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4b15      	ldr	r3, [pc, #84]	; (8005070 <pxCurrentTCBConst>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	f01e 0f10 	tst.w	lr, #16
 8005020:	bf08      	it	eq
 8005022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502a:	6010      	str	r0, [r2, #0]
 800502c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005034:	f380 8811 	msr	BASEPRI, r0
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f7ff f818 	bl	8004074 <vTaskSwitchContext>
 8005044:	f04f 0000 	mov.w	r0, #0
 8005048:	f380 8811 	msr	BASEPRI, r0
 800504c:	bc09      	pop	{r0, r3}
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	6808      	ldr	r0, [r1, #0]
 8005052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005056:	f01e 0f10 	tst.w	lr, #16
 800505a:	bf08      	it	eq
 800505c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005060:	f380 8809 	msr	PSP, r0
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	f3af 8000 	nop.w

08005070 <pxCurrentTCBConst>:
 8005070:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop

08005078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005090:	f7fe ff32 	bl	8003ef8 <xTaskIncrementTick>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <SysTick_Handler+0x3c>)
 800509c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	2300      	movs	r3, #0
 80050a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	e000ed04 	.word	0xe000ed04

080050b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <vPortSetupTimerInterrupt+0x34>)
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <vPortSetupTimerInterrupt+0x38>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050c8:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <vPortSetupTimerInterrupt+0x3c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <vPortSetupTimerInterrupt+0x40>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	099b      	lsrs	r3, r3, #6
 80050d4:	4a09      	ldr	r2, [pc, #36]	; (80050fc <vPortSetupTimerInterrupt+0x44>)
 80050d6:	3b01      	subs	r3, #1
 80050d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050da:	4b04      	ldr	r3, [pc, #16]	; (80050ec <vPortSetupTimerInterrupt+0x34>)
 80050dc:	2207      	movs	r2, #7
 80050de:	601a      	str	r2, [r3, #0]
}
 80050e0:	bf00      	nop
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	e000e010 	.word	0xe000e010
 80050f0:	e000e018 	.word	0xe000e018
 80050f4:	20000000 	.word	0x20000000
 80050f8:	10624dd3 	.word	0x10624dd3
 80050fc:	e000e014 	.word	0xe000e014

08005100 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005100:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005110 <vPortEnableVFP+0x10>
 8005104:	6801      	ldr	r1, [r0, #0]
 8005106:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800510a:	6001      	str	r1, [r0, #0]
 800510c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800510e:	bf00      	nop
 8005110:	e000ed88 	.word	0xe000ed88

08005114 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800511a:	f3ef 8305 	mrs	r3, IPSR
 800511e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b0f      	cmp	r3, #15
 8005124:	d913      	bls.n	800514e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005126:	4a16      	ldr	r2, [pc, #88]	; (8005180 <vPortValidateInterruptPriority+0x6c>)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005130:	4b14      	ldr	r3, [pc, #80]	; (8005184 <vPortValidateInterruptPriority+0x70>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	7afa      	ldrb	r2, [r7, #11]
 8005136:	429a      	cmp	r2, r3
 8005138:	d209      	bcs.n	800514e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	e7fe      	b.n	800514c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800514e:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <vPortValidateInterruptPriority+0x74>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005156:	4b0d      	ldr	r3, [pc, #52]	; (800518c <vPortValidateInterruptPriority+0x78>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d909      	bls.n	8005172 <vPortValidateInterruptPriority+0x5e>
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	e7fe      	b.n	8005170 <vPortValidateInterruptPriority+0x5c>
	}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	e000e3f0 	.word	0xe000e3f0
 8005184:	20000d1c 	.word	0x20000d1c
 8005188:	e000ed0c 	.word	0xe000ed0c
 800518c:	20000d20 	.word	0x20000d20

08005190 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800519c:	f7fe fdf2 	bl	8003d84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051a0:	4b57      	ldr	r3, [pc, #348]	; (8005300 <pvPortMalloc+0x170>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051a8:	f000 f90c 	bl	80053c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051ac:	4b55      	ldr	r3, [pc, #340]	; (8005304 <pvPortMalloc+0x174>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f040 808c 	bne.w	80052d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01c      	beq.n	80051fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80051c0:	2208      	movs	r2, #8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d013      	beq.n	80051fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f023 0307 	bic.w	r3, r3, #7
 80051d8:	3308      	adds	r3, #8
 80051da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <pvPortMalloc+0x6a>
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e7fe      	b.n	80051f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d068      	beq.n	80052d2 <pvPortMalloc+0x142>
 8005200:	4b41      	ldr	r3, [pc, #260]	; (8005308 <pvPortMalloc+0x178>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	429a      	cmp	r2, r3
 8005208:	d863      	bhi.n	80052d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800520a:	4b40      	ldr	r3, [pc, #256]	; (800530c <pvPortMalloc+0x17c>)
 800520c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800520e:	4b3f      	ldr	r3, [pc, #252]	; (800530c <pvPortMalloc+0x17c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005214:	e004      	b.n	8005220 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	429a      	cmp	r2, r3
 8005228:	d903      	bls.n	8005232 <pvPortMalloc+0xa2>
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f1      	bne.n	8005216 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005232:	4b33      	ldr	r3, [pc, #204]	; (8005300 <pvPortMalloc+0x170>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005238:	429a      	cmp	r2, r3
 800523a:	d04a      	beq.n	80052d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2208      	movs	r2, #8
 8005242:	4413      	add	r3, r2
 8005244:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	1ad2      	subs	r2, r2, r3
 8005256:	2308      	movs	r3, #8
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	429a      	cmp	r2, r3
 800525c:	d91e      	bls.n	800529c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800525e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4413      	add	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	2b00      	cmp	r3, #0
 800526e:	d009      	beq.n	8005284 <pvPortMalloc+0xf4>
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e7fe      	b.n	8005282 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	1ad2      	subs	r2, r2, r3
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005296:	69b8      	ldr	r0, [r7, #24]
 8005298:	f000 f8f6 	bl	8005488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800529c:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <pvPortMalloc+0x178>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	4a18      	ldr	r2, [pc, #96]	; (8005308 <pvPortMalloc+0x178>)
 80052a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052aa:	4b17      	ldr	r3, [pc, #92]	; (8005308 <pvPortMalloc+0x178>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4b18      	ldr	r3, [pc, #96]	; (8005310 <pvPortMalloc+0x180>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d203      	bcs.n	80052be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <pvPortMalloc+0x178>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a15      	ldr	r2, [pc, #84]	; (8005310 <pvPortMalloc+0x180>)
 80052bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <pvPortMalloc+0x174>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052d2:	f7fe fd65 	bl	8003da0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d009      	beq.n	80052f4 <pvPortMalloc+0x164>
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e7fe      	b.n	80052f2 <pvPortMalloc+0x162>
	return pvReturn;
 80052f4:	69fb      	ldr	r3, [r7, #28]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3728      	adds	r7, #40	; 0x28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	2000192c 	.word	0x2000192c
 8005304:	20001938 	.word	0x20001938
 8005308:	20001930 	.word	0x20001930
 800530c:	20001924 	.word	0x20001924
 8005310:	20001934 	.word	0x20001934

08005314 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d046      	beq.n	80053b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005326:	2308      	movs	r3, #8
 8005328:	425b      	negs	r3, r3
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4413      	add	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	4b20      	ldr	r3, [pc, #128]	; (80053bc <vPortFree+0xa8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4013      	ands	r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <vPortFree+0x42>
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e7fe      	b.n	8005354 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <vPortFree+0x5e>
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	e7fe      	b.n	8005370 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	4b11      	ldr	r3, [pc, #68]	; (80053bc <vPortFree+0xa8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d019      	beq.n	80053b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d115      	bne.n	80053b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <vPortFree+0xa8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	43db      	mvns	r3, r3
 8005392:	401a      	ands	r2, r3
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005398:	f7fe fcf4 	bl	8003d84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <vPortFree+0xac>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4413      	add	r3, r2
 80053a6:	4a06      	ldr	r2, [pc, #24]	; (80053c0 <vPortFree+0xac>)
 80053a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053aa:	6938      	ldr	r0, [r7, #16]
 80053ac:	f000 f86c 	bl	8005488 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80053b0:	f7fe fcf6 	bl	8003da0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053b4:	bf00      	nop
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20001938 	.word	0x20001938
 80053c0:	20001930 	.word	0x20001930

080053c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80053ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053d0:	4b27      	ldr	r3, [pc, #156]	; (8005470 <prvHeapInit+0xac>)
 80053d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00c      	beq.n	80053f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3307      	adds	r3, #7
 80053e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <prvHeapInit+0xac>)
 80053f4:	4413      	add	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <prvHeapInit+0xb0>)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <prvHeapInit+0xb0>)
 8005404:	2200      	movs	r2, #0
 8005406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4413      	add	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005410:	2208      	movs	r2, #8
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0307 	bic.w	r3, r3, #7
 800541e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a15      	ldr	r2, [pc, #84]	; (8005478 <prvHeapInit+0xb4>)
 8005424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <prvHeapInit+0xb4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2200      	movs	r2, #0
 800542c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <prvHeapInit+0xb4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <prvHeapInit+0xb4>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <prvHeapInit+0xb8>)
 8005452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a09      	ldr	r2, [pc, #36]	; (8005480 <prvHeapInit+0xbc>)
 800545a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <prvHeapInit+0xc0>)
 800545e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005462:	601a      	str	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000d24 	.word	0x20000d24
 8005474:	20001924 	.word	0x20001924
 8005478:	2000192c 	.word	0x2000192c
 800547c:	20001934 	.word	0x20001934
 8005480:	20001930 	.word	0x20001930
 8005484:	20001938 	.word	0x20001938

08005488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005490:	4b28      	ldr	r3, [pc, #160]	; (8005534 <prvInsertBlockIntoFreeList+0xac>)
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e002      	b.n	800549c <prvInsertBlockIntoFreeList+0x14>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d8f7      	bhi.n	8005496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	4413      	add	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d108      	bne.n	80054ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	441a      	add	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d118      	bne.n	8005510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <prvInsertBlockIntoFreeList+0xb0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d00d      	beq.n	8005506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	441a      	add	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e008      	b.n	8005518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <prvInsertBlockIntoFreeList+0xb0>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e003      	b.n	8005518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d002      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20001924 	.word	0x20001924
 8005538:	2000192c 	.word	0x2000192c

0800553c <__libc_init_array>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4e0d      	ldr	r6, [pc, #52]	; (8005574 <__libc_init_array+0x38>)
 8005540:	4c0d      	ldr	r4, [pc, #52]	; (8005578 <__libc_init_array+0x3c>)
 8005542:	1ba4      	subs	r4, r4, r6
 8005544:	10a4      	asrs	r4, r4, #2
 8005546:	2500      	movs	r5, #0
 8005548:	42a5      	cmp	r5, r4
 800554a:	d109      	bne.n	8005560 <__libc_init_array+0x24>
 800554c:	4e0b      	ldr	r6, [pc, #44]	; (800557c <__libc_init_array+0x40>)
 800554e:	4c0c      	ldr	r4, [pc, #48]	; (8005580 <__libc_init_array+0x44>)
 8005550:	f000 f82c 	bl	80055ac <_init>
 8005554:	1ba4      	subs	r4, r4, r6
 8005556:	10a4      	asrs	r4, r4, #2
 8005558:	2500      	movs	r5, #0
 800555a:	42a5      	cmp	r5, r4
 800555c:	d105      	bne.n	800556a <__libc_init_array+0x2e>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005564:	4798      	blx	r3
 8005566:	3501      	adds	r5, #1
 8005568:	e7ee      	b.n	8005548 <__libc_init_array+0xc>
 800556a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800556e:	4798      	blx	r3
 8005570:	3501      	adds	r5, #1
 8005572:	e7f2      	b.n	800555a <__libc_init_array+0x1e>
 8005574:	0800567c 	.word	0x0800567c
 8005578:	0800567c 	.word	0x0800567c
 800557c:	0800567c 	.word	0x0800567c
 8005580:	08005680 	.word	0x08005680

08005584 <memcpy>:
 8005584:	b510      	push	{r4, lr}
 8005586:	1e43      	subs	r3, r0, #1
 8005588:	440a      	add	r2, r1
 800558a:	4291      	cmp	r1, r2
 800558c:	d100      	bne.n	8005590 <memcpy+0xc>
 800558e:	bd10      	pop	{r4, pc}
 8005590:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005594:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005598:	e7f7      	b.n	800558a <memcpy+0x6>

0800559a <memset>:
 800559a:	4402      	add	r2, r0
 800559c:	4603      	mov	r3, r0
 800559e:	4293      	cmp	r3, r2
 80055a0:	d100      	bne.n	80055a4 <memset+0xa>
 80055a2:	4770      	bx	lr
 80055a4:	f803 1b01 	strb.w	r1, [r3], #1
 80055a8:	e7f9      	b.n	800559e <memset+0x4>
	...

080055ac <_init>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr

080055b8 <_fini>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr
